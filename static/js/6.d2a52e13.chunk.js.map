{"version":3,"sources":["hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","utils/lotteryUtils.ts","hooks/useTickets.ts","views/Home/components/CardBusdValue.tsx","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useBuyLottery.ts","hooks/useAllowance.ts","../node_modules/lodash/max.js","../../../../../../opt/hostedtoolcache/node/14.17.0/x64/lib/node_modules/react-scripts/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","hooks/useGetLotteryHasDrawn.ts","hooks/useApproval.ts","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/WinCard.tsx","views/Home/Home.tsx"],"names":["FetchStatus","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getCakeContract","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","BIG_ZERO","balance","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","account","useWeb3React","useLastUpdated","lastUpdated","setLastUpdated","eth","getBalance","walletBalance","refresh","useTokenBalance","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","console","error","prev","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","multiCall","abi","calls","getWeb3NoAccount","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","length","i","newCalls","slice","calldata","map","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","lotteryContract","price","numbersList","times","DEFAULT_TOKEN_DECIMAL","toString","send","from","on","tx","transactionHash","getTickets","ticketsContract","customLotteryNum","issueIndex","getTicketsAmount","calls1","Array","apply","options","address","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","eq","push","calls3","tickets","getLotteryStatus","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","rewards","finalTokenIds","r","getTotalClaim","drawed","calls4","claim","reduce","p","c","sum","getTotalRewards","getMax","maxNumber","getLotteryIssueIndex","getMatchingRewardLength","matchNumber","historyAmount","amount","div","LOTTERY_TICKET_PRICE","toNumber","getWinningNumbers","numbers","parseInt","historyNumbers","winningNumbers","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","useLotteryTicket","useLottery","useCallback","useWinningNumbers","setWinningNumbers","useTickets","lotteryNumber","setTickets","CardBusdValue","props","StyledSpacer","styled","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","child","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","txHash","useMultiBuyLottery","onMultiBuy","useMaxNumber","max","setMax","fetchMax","useLotteryAllowance","allowance","setAllowance","useCake","getLotteryAddress","fetchAllowance","useIfoAllowance","tokenContract","spenderAddress","dependency","fetch","baseExtremum","require","baseGt","identity","module","exports","array","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","isArray","unsupportedIterableToArray","F","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","farmsConfig","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","fetchBalances","useAllEarnings","balances","fetchAllBalances","Block","CakeHarvestBalance","t","useTranslation","earningsSum","accum","earning","earningNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","gt","CakeWalletBalance","cakeBalance","getCakeAddress","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","masterChefContract","useMasterchef","balancesWithValue","balanceType","harvestAllFarms","farmWithBalance","harvest","scale","mb","src","alt","width","height","disabled","onClick","count","UnlockButton","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","state","fetchLotteryStatus","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","TicketsList","primary","WarningModal","onDismiss","title","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onChange","onSelectMax","alignItems","type","inputMode","min","placeholder","num","toLocaleString","BuyTicketModal","val","setVal","setRequestedBuy","fullBalance","useMemo","maxTickets","getFullDisplayBalance","handleBuy","Math","floor","random","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","currentTarget","validity","valid","toUpperCase","Tips","lotteryPrice","Announce","Final","variant","isInteger","CakeWinnings","cakeAmount","claimAmountBusd","LotteryJackpot","StyledLotteryCard","LotteryCard","requestClaim","setRequestedClaim","useModal","PurchaseWarningModal","handleClaim","onPresentBuy","marginRight","StyledCakeStats","Row","CakeStats","burnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","response","json","responseData","fetchData","useGetStats","tvl","maximumFractionDigits","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","isFetchingFarmData","setIsFetchingFarmData","farmsLP","useFarms","cakePrice","dispatch","useAppDispatch","fetchFarmsPublicDataAsync","nonArchivedFarms","nonArchivedFarm","fetchFarmData","highestApr","aprs","multiplier","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","maxApr","aprText","split","earnUpTo","InFarms","exact","activeClassName","to","animation","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","includes","latestPools","orderBy","assets","join","EarnAssetCard","earn","InPools","WinCard","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/6.d2a52e13.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const web3 = useWeb3()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3NoAccount } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { DEFAULT_TOKEN_DECIMAL, LOTTERY_TICKET_PRICE } from 'config'\nimport { AbiItem } from 'web3-utils'\nimport { getMulticallAddress } from './addressHelpers'\nimport { BIG_ZERO } from './bigNumber'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3NoAccount()\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(DEFAULT_TOKEN_DECIMAL).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finalTokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finalTokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finalTokenIds.length > 200) {\n    finalTokenIds = finalTokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finalTokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenIds = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIndex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenIds.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BIG_ZERO)\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return BIG_ZERO\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIndex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\n\n    return new BigNumber(amount).div(DEFAULT_TOKEN_DECIMAL).div(LOTTERY_TICKET_PRICE).toNumber()\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWeb3React()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(BIG_ZERO)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n      setRewards(new BigNumber(res))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(BIG_ZERO)\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWeb3React()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract, lastUpdated])\n\n  return { claimLoading, claimAmount, setLastUpdated }\n}\n\nexport const useWinningNumbers = () => {\n  const [winningNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winningNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbers = await getMatchingRewardLength(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport default useTickets\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useCake } from './useContract'\nimport useRefresh from './useRefresh'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchAllowance()\n    }\n  }, [account, cakeContract, fastRefresh])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\n  const { account } = useWeb3React()\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    if (account) {\n      fetch()\n    }\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {cakePriceBusd.gt(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const { t } = useTranslation()\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {cakePriceBusd.gt(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\nimport { harvest } from 'utils/callHelpers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport { useMasterchef } from 'hooks/useContract'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const farmsWithBalance = useFarmsWithBalance()\n  const masterChefContract = useMasterchef()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const farmWithBalance of balancesWithValue) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        await harvest(masterChefContract, farmWithBalance.pid, account)\n      } catch (error) {\n        // TODO: find a way to handle when the user rejects transaction or it fails\n      }\n    }\n    setPendingTx(false)\n  }, [account, balancesWithValue, masterChefContract])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('CAKE to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{t('CAKE in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting CAKE')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import { useEffect, useState } from 'react'\nimport { useLottery } from 'hooks/useContract'\nimport { getLotteryStatus } from 'utils/lotteryUtils'\n\n/**\n * Returns whether or not the current lottery has drawn numbers\n *\n * @return {Boolean}\n */\nconst useGetLotteryHasDrawn = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const lotteryContract = useLottery()\n\n  useEffect(() => {\n    if (lotteryContract) {\n      const fetchLotteryStatus = async () => {\n        const state = await getLotteryStatus(lotteryContract)\n        setLotteryHasDrawn(state)\n      }\n\n      fetchLotteryStatus()\n    }\n  }, [lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport default useGetLotteryHasDrawn\n","import { useCallback, useState } from 'react'\nimport { useLotteryApprove } from './useApprove'\n\nexport const useApproval = (onPresentApprove: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useLotteryApprove()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n      onPresentApprove()\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, onPresentApprove])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport default useApproval\n","import React from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Modal title={t('Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {t('Lottery ticket purchases are final.')}\n        <br />\n        {t('Your CAKE will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {t('Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {t(\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button width=\"100%\" onClick={onDismiss}>\n          {t('I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  value: string\n  onSelectMax?: () => void\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Flex alignItems=\"center\">\n        <Input type=\"number\" inputMode=\"numeric\" min=\"0\" onChange={onChange} placeholder=\"0\" value={value} />\n        <StyledTokenAdornmentWrapper>\n          <StyledSpacer />\n          <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n          <StyledSpacer />\n          <Button scale=\"sm\" onClick={onSelectMax}>\n            {t('Max')}\n          </Button>\n        </StyledTokenAdornmentWrapper>\n      </Flex>\n      <StyledMaxText>\n        {t('%num% %symbol% Available', { num: max.toLocaleString(), symbol: availableSymbol })}\n      </StyledMaxText>\n    </>\n  )\n}\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport { useTranslation } from 'contexts/Localization'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onDismiss?: () => void\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getBalanceNumber(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (e.currentTarget.validity.valid) {\n      setVal(e.currentTarget.value)\n    }\n  }\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={t('Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={t('Ticket').toUpperCase()}\n        availableSymbol=\"CAKE\"\n      />\n      <div>\n        <Tips>{t('1 Ticket = %lotteryPrice% CAKE', { lotteryPrice: LOTTERY_TICKET_PRICE })}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {t('Ticket purchases are final. Your CAKE cannot be returned to you after buying tickets.')}\n        </Announce>\n        <Final>{t('You will spend: %num% CAKE', { num: cakeCosts(val) })}</Final>\n      </div>\n      <ModalActions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          width=\"100%\"\n          disabled={\n            pendingTx ||\n            !Number.isInteger(parseInt(val)) ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n","import React from 'react'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { BigNumber } from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\ninterface CakeWinningsProps {\n  claimAmount: BigNumber\n}\n\nconst CakeWinnings: React.FC<CakeWinningsProps> = ({ claimAmount }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const cakeAmount = getBalanceNumber(claimAmount)\n  const cakePriceBusd = usePriceCakeBusd()\n  const claimAmountBusd = new BigNumber(cakeAmount).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={cakeAmount} lineHeight=\"1.5\" />\n      {cakePriceBusd.gt(0) && <CardBusdValue value={claimAmountBusd} decimals={2} />}\n    </Block>\n  )\n}\n\nexport default CakeWinnings\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst LotteryJackpot = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text bold fontSize=\"24px\" style={{ lineHeight: '1.5' }}>\n        {t('Coming Soon')}\n      </Text>\n      <br />\n    </>\n  )\n}\n\nexport default LotteryJackpot\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { useLotteryAllowance } from 'hooks/useAllowance'\nimport { useApproval } from 'hooks/useApproval'\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\nimport BuyTicketModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeWinnings from './CakeWinnings'\nimport LotteryJackpot from './LotteryJackpot'\n\nconst StyledLotteryCard = styled(Card)`\n  background-image: url('/images/ticket-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  display: flex;\n  margin-top: 24px;\n  button {\n    flex: 1 0 50%;\n  }\n`\n\nconst LotteryCard = () => {\n  const { account } = useWeb3React()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const [requestClaim, setRequestedClaim] = useState(false)\n  const { t } = useTranslation()\n  const allowance = useLotteryAllowance()\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const { claimAmount, setLastUpdated } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onMultiClaim()\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n        setLastUpdated()\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiClaim, setRequestedClaim, setLastUpdated])\n\n  const renderLotteryTicketButtonBuyOrApprove = () => {\n    if (!allowance.toNumber()) {\n      return (\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n          {t('Approve CAKE')}\n        </Button>\n      )\n    }\n    if (lotteryHasDrawn) {\n      return <Button disabled> {t('On sale soon')}</Button>\n    }\n    return (\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy}>\n        {t('Buy Tickets')}\n      </Button>\n    )\n  }\n\n  const [onPresentBuy] = useModal(<BuyTicketModal max={cakeBalance} />)\n\n  return (\n    <StyledLotteryCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Your Lottery Winnings')}\n        </Heading>\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('CAKE to Collect')}:</Label>\n          <CakeWinnings claimAmount={claimAmount} />\n        </Block>\n        <Block>\n          <Label>{t('Total jackpot this round')}:</Label>\n          <LotteryJackpot />\n        </Block>\n        {account ? (\n          <Actions>\n            <Button\n              id=\"dashboard-collect-winnings\"\n              disabled={getBalanceNumber(claimAmount) === 0 || requestClaim}\n              onClick={handleClaim}\n              style={{ marginRight: '8px' }}\n            >\n              {t('Collect Winnings')}\n            </Button>\n            {renderLotteryTicketButtonBuyOrApprove()}\n          </Actions>\n        ) : (\n          <Actions>\n            <UnlockButton width=\"100%\" />\n          </Actions>\n        )}\n      </CardBody>\n    </StyledLotteryCard>\n  )\n}\n\nexport default LotteryCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Cake Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total CAKE Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total CAKE Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('New CAKE/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={20} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const { t } = useTranslation()\n  const data = useGetStats()\n  const tvl = data ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading scale=\"lg\" mb=\"24px\">\n          {t('Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{t('Across all LPs and Syrup Pools')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/* eslint-disable camelcase */\nexport interface DeBankTvlResponse {\n  id: string\n  chain: string\n  name: string\n  site_url: string\n  logo_url: string\n  has_supported_portfolio: boolean\n  tvl: number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\n        const responseData: DeBankTvlResponse = await response.json()\n\n        setData(responseData)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import React, { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useFarms, usePriceCakeBusd } from 'state/hooks'\nimport { fetchFarmsPublicDataAsync, nonArchivedFarms } from 'state/farms'\nimport { getFarmApr } from 'utils/apr'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const [isFetchingFarmData, setIsFetchingFarmData] = useState(true)\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n\n  // Fetch farm data once to get the max APR\n  useEffect(() => {\n    const fetchFarmData = async () => {\n      try {\n        await dispatch(fetchFarmsPublicDataAsync(nonArchivedFarms.map((nonArchivedFarm) => nonArchivedFarm.pid)))\n      } finally {\n        setIsFetchingFarmData(false)\n      }\n    }\n\n    fetchFarmData()\n  }, [dispatch, setIsFetchingFarmData])\n\n  const highestApr = useMemo(() => {\n    if (cakePrice.gt(0)) {\n      const aprs = farmsLP.map((farm) => {\n        // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n        if (farm.pid !== 0 && farm.multiplier !== '0X' && farm.lpTotalInQuoteToken && farm.quoteToken.busdPrice) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\n          return getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n      const maxApr = max(aprs)\n      return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n    }\n    return null\n  }, [cakePrice, farmsLP])\n\n  const aprText = highestApr || '-'\n  const earnAprText = t('Earn up to %highestApr% APR in Farms', { highestApr: aprText })\n  const [earnUpTo, InFarms] = earnAprText.split(aprText)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earnUpTo}\n          </Heading>\n          <CardMidContent color=\"#7645d9\">\n            {highestApr && !isFetchingFarmData ? (\n              `${highestApr}%`\n            ) : (\n              <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n            )}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InFarms}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(#53dee9, #7645d9);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\n\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n// Always include CAKE\nconst assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\n\nconst EarnAssetCard = () => {\n  const { t } = useTranslation()\n  const assetText = t('Earn %assets% in Pools', { assets })\n  const [earn, InPools] = assetText.split(assets)\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {earn}\n          </Heading>\n          <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              {InPools}\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst WinCard = () => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {t('Lottery')}\n          </Heading>\n          <CardMidContent color=\"#7645d9\">{t('Coming Soon')}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\" />\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default WinCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 24px;\n  grid-gap: 24px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-bottom: 32px;\n    grid-gap: 32px;\n\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n          {t('PancakeSwap')}\n        </Heading>\n        <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <LotteryCard />\n        </Cards>\n        <CTACards>\n          <EarnAPRCard />\n          <EarnAssetCard />\n          <WinCard />\n        </CTACards>\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}