{"version":3,"sources":["hooks/useTokenBalance.ts","views/Profile/components/ApproveConfirmButtons.tsx","hooks/useApproveConfirmTransaction.ts","views/Profile/components/HeaderWrapper.tsx","views/Profile/components/ProfileAvatar.tsx","views/Profile/components/ComingSoon.tsx","views/Profile/components/SecondaryCard.tsx","views/Profile/components/StatBox.tsx","views/Profile/ProfileCreation/UserName.tsx","views/Profile/ProfileCreation/config.ts","views/Profile/ProfileCreation/contexts/ProfileCreationProvider.tsx","views/Profile/ProfileCreation/Header.tsx","views/Profile/components/WalletNotConnected.tsx","hooks/useHasCakeBalance.ts","views/Profile/components/SelectionCard.tsx","views/Profile/components/NextStepButton.tsx","views/Profile/ProfileCreation/contexts/hook.ts","views/Profile/ProfileCreation/Mint.tsx","views/Profile/ProfileCreation/ProfilePicture.tsx","views/Profile/ProfileCreation/TeamSelection.tsx","views/Profile/components/ConfirmProfileCreationModal.tsx","views/Profile/components/EditProfileModal/reducer.ts","views/Profile/ProfileCreation/Steps.tsx","views/Profile/ProfileCreation/index.tsx","views/Profile/components/ClaimGiftModal.tsx","hooks/useGetProfileCosts.ts","views/Profile/components/EditProfileModal/StartView.tsx","views/Profile/components/EditProfileModal/PauseProfileView.tsx","views/Profile/components/EditProfileModal/ChangeProfilePicView.tsx","views/Profile/components/EditProfileModal/ApproveCakeView.tsx","views/Profile/components/EditProfileModal/index.tsx","views/Profile/components/Header.tsx","views/Profile/components/AchievementAvatar.tsx","views/Profile/components/AchievementTitle.tsx","views/Profile/components/AchievementDescription.tsx","views/Profile/components/AchievementCard.tsx","views/Profile/components/AchievementsList.tsx","views/Profile/components/ActionColumn.tsx","views/Profile/components/AchievementRow/PointsLabel.tsx","views/Profile/components/AchievementRow/index.tsx","views/Profile/components/ClaimPointsCallout .tsx","views/Profile/components/Menu.tsx","views/Profile/TaskCenter.tsx","views/Profile/components/CardHeader.tsx","views/Profile/components/CollectibleCard.tsx","views/Profile/components/Collectibles.tsx","views/Profile/components/EditProfileAvatar.tsx","views/Profile/PublicProfile.tsx","views/Profile/index.tsx"],"names":["FetchStatus","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getCakeContract","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","BIG_ZERO","balance","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","account","useWeb3React","useLastUpdated","lastUpdated","setLastUpdated","eth","getBalance","walletBalance","refresh","useTokenBalance","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","console","error","prev","ButtonArrangement","StyledApproveConfirmButtonRow","styled","div","theme","mediaQueries","md","Button","UIKitButton","iconAttrs","width","color","ChevronRight","ChevronRightIcon","attrs","ChevronBottom","ChevronDownIcon","spinnerIcon","spin","ApproveConfirmButtons","isApproveDisabled","isApproving","isConfirming","isConfirmDisabled","onApprove","onConfirm","buttonArrangement","ROW","t","useTranslation","disabled","onClick","endIcon","undefined","isLoading","justifyContent","initialState","approvalState","approvalReceipt","approvalError","confirmState","confirmReceipt","confirmError","reducer","state","actions","type","payload","useApproveConfirmTransaction","onRequiresApproval","onSuccess","noop","onApproveSuccess","useReducer","dispatch","handlePreApprove","useRef","toastError","useToast","current","then","result","isApproved","isConfirmed","handleApprove","on","handleConfirm","HeaderWrapper","colors","textSubtle","TeamAvatar","img","card","background","sm","AvatarWrapper","bg","AvatarInactive","NoProfileAvatarIcon","ProfileAvatar","profile","nft","images","isActive","src","team","alt","name","ComingSoon","children","flexDirection","alignItems","p","height","as","scale","SecondaryCard","Text","tertiary","defaultProps","StatBox","Icon","icon","title","subtitle","isDisabled","props","mr","textTransform","fontSize","bold","ExistingUserState","REGISTER_COST","STARTER_BUNNY_IDENTIFIERS","isInitialized","currentStep","teamId","selectedNft","nftAddress","tokenId","userName","minimumCakeRequired","MINT_COST","multipliedBy","DEFAULT_TOKEN_DECIMAL","allowance","totalCost","action","step","ProfileCreationContext","createContext","ProfileCreationProvider","isSubscribed","bunnyFactoryContract","getBunnyFactoryContract","canMint","fetchData","useMemo","nextStep","setTeamId","setSelectedNft","setUserName","Provider","value","Wrapper","steps","Header","useContext","mb","map","translationKey","index","key","WalletNotConnected","UnlockButton","useHasCakeBalance","minimumBalance","getCakeAddress","gte","StyledCard","Card","isSuccess","Label","label","Body","Children","StyledBackgroundImage","SelectionCard","isChecked","image","onChange","checked","e","target","style","flex","NextStepButton","useProfileCreation","nfts","nftList","filter","includes","identifier","minimumCakeBalanceToMint","Mint","variationId","setVariationId","useCake","useBunnyFactory","hasMinimumCakeRequired","options","address","response","currentAllowance","approve","toJSON","send","from","mintNFT","num","Number","Link","RouterLink","primary","NftWrapper","ProfilePicture","setIsApproved","setIsApproving","useGetCollectibles","nftsInWallet","tokenIds","useERC721","length","to","marginLeft","walletNft","firstTokenId","getAddressByType","parseInt","getPancakeProfileAddress","once","message","Team","currentTeamId","teams","useTeams","handleTeamSelection","teamValues","shuffle","Object","values","id","isJoinable","users","toLocaleString","ConfirmProfileCreationModal","onDismiss","profileContract","useProfile","useAppDispatch","toastSuccess","createProfile","fetchProfile","Views","profileApiUrl","process","minimumCakeToRegister","InputWrap","Input","UIKitInput","Indicator","Flex","UserName","isAcknowledged","setIsAcknowledged","library","IDLE","existingUserState","setExistingUserState","isValid","setIsValid","setIsLoading","setMessage","useModal","onPresentConfirmProfileCreation","isUserCreated","CREATED","checkUsernameValidity","debounce","fetch","ok","json","data","bnbSign","signature","personal","sign","utils","utf8ToHex","method","headers","body","JSON","stringify","username","dateCreated","formatDistance","parseISO","created_at","Date","NEW","fetchUser","event","isWarning","minLength","maxLength","placeholder","py","minHeight","htmlFor","display","cursor","marginBottom","ml","mt","Steps","TeamSelection","ProfileCreation","Page","useCanClaim","canClaim","setCanClaim","setRefresh","checkClaimStatus","useCallback","prevRefresh","claimRefundContract","getClaimRefundContract","walletCanClaim","fetchClaimStatus","ClaimGift","setIsConfirming","useClaimRefundContract","maxWidth","getCakeBack","currentView","view","previousView","useEditProfile","START","goToStart","goToChange","CHANGE","goToRemove","REMOVE","goToApprove","APPROVE","goPrevious","useGetProfileCosts","numberCakeToReactivate","numberCakeToRegister","numberCakeToUpdate","costs","setCosts","getProfileContract","makeBatchRequest","fetchCosts","DangerOutline","variant","failure","StartPage","needsApproval","setNeedsApproval","cost","lt","checkApprovalStatus","minimum","getFullDisplayBalance","PauseProfilePage","pancakeProfileContract","useProfileContract","getBalanceNumber","pauseProfile","ChangeProfilePicPage","updateProfile","reactivateProfile","ApproveCakePage","times","viewTitle","EditProfileModal","isStartView","handleBack","onBack","hideCloseButton","StartView","PauseProfileView","ChangeProfilePicView","ApproveCakeView","ProfileHeader","onPresentClaimGiftModal","onEditProfileModal","hasProfile","startIcon","NoBadgePlaceholder","BunnyPlaceholderIcon","StyledAchievementAvatar","AchievementAvatar","badge","AchievementTitle","Description","AchievementDescription","description","Details","AchievementCard","achievement","points","Grid","AchievementsList","achievements","useAchievements","ActionColumn","PointsLabel","localePoints","StyledAchievementRow","cardBorder","AchievementRow","onCollectSuccess","isCollecting","setIsCollecting","pointCenterContract","usePointCenterIfoContract","px","getPoints","ClaimPointsCallout","claimableAchievements","setClaimableAchievement","getClaimableIfoData","ifoData","fetchIfoClaims","handleCollectSuccess","addAchievement","addPoints","prevClaimableAchievements","prevClaimableAchievement","totalPointsToCollect","sumBy","Menu","activeIndex","TaskCenter","CardHeader","UIKitCardHeader","isDark","getBackground","PreviewImage","CollectibleCard","lg","CollectibleList","Collectibles","nftInWallet","EditOverlay","StyledEditProfileAvatar","EditProfileAvatar","Content","Username","Heading","Status","ResponsiveText","AddressLink","Section","PublicProfile","usePersistState","localStorageKey","usernameVisibilityToggled","setUsernameVisibility","VisibilityOff","VisibilityOn","replace","href","getBscScanAddressUrl","external","outline","PrizeIcon","Profile","useFetchAchievements","PageLoader","exact","path"],"mappings":"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","file":"static/js/9.2ebd4b7b.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const web3 = useWeb3()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronRightIcon, Button as UIKitButton, AutoRenewIcon, ChevronDownIcon, Box, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport enum ButtonArrangement {\n  ROW = 'row',\n  SEQUENTIAL = 'sequential',\n}\n\ninterface ApproveConfirmButtonsProps {\n  isApproveDisabled: boolean\n  isApproving: boolean\n  isConfirming: boolean\n  isConfirmDisabled: boolean\n  onApprove: () => void\n  onConfirm: () => void\n  buttonArrangement?: ButtonArrangement\n}\n\nconst StyledApproveConfirmButtonRow = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr;\n  justify-content: center;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: 1fr 24px 1fr;\n  }\n`\n\nconst Button = styled(UIKitButton)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    min-width: 160px;\n  }\n`\n\nconst iconAttrs = { width: '24px', color: 'textDisabled' }\n\nconst ChevronRight = styled(ChevronRightIcon).attrs(iconAttrs)`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst ChevronBottom = styled(ChevronDownIcon).attrs(iconAttrs)`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: none;\n  }\n`\n\nconst spinnerIcon = <AutoRenewIcon spin color=\"currentColor\" />\n\nconst ApproveConfirmButtons: React.FC<ApproveConfirmButtonsProps> = ({\n  isApproveDisabled,\n  isApproving,\n  isConfirming,\n  isConfirmDisabled,\n  onApprove,\n  onConfirm,\n  buttonArrangement = ButtonArrangement.ROW,\n}) => {\n  const { t } = useTranslation()\n\n  const ApproveConfirmRow = () => {\n    return (\n      <StyledApproveConfirmButtonRow>\n        <Box>\n          <Button\n            disabled={isApproveDisabled}\n            onClick={onApprove}\n            endIcon={isApproving ? spinnerIcon : undefined}\n            isLoading={isApproving}\n          >\n            {isApproving ? t('Approving') : t('Approve')}\n          </Button>\n        </Box>\n        <Flex justifyContent=\"center\">\n          <ChevronRight />\n          <ChevronBottom />\n        </Flex>\n        <Box>\n          <Button\n            onClick={onConfirm}\n            disabled={isConfirmDisabled}\n            isLoading={isConfirming}\n            endIcon={isConfirming ? spinnerIcon : undefined}\n          >\n            {isConfirming ? t('Confirming') : t('Confirm')}\n          </Button>\n        </Box>\n      </StyledApproveConfirmButtonRow>\n    )\n  }\n\n  const ApproveConfirmSequential = () => {\n    return (\n      <>\n        {isApproveDisabled ? (\n          <Box>\n            <Button\n              onClick={onConfirm}\n              disabled={isConfirmDisabled}\n              isLoading={isConfirming}\n              endIcon={isConfirming ? spinnerIcon : undefined}\n            >\n              {isConfirming ? t('Confirming') : t('Confirm')}\n            </Button>\n          </Box>\n        ) : (\n          <Box>\n            <Button onClick={onApprove} endIcon={isApproving ? spinnerIcon : undefined} isLoading={isApproving}>\n              {isApproving ? t('Approving') : t('Approve')}\n            </Button>\n          </Box>\n        )}\n      </>\n    )\n  }\n\n  return buttonArrangement === ButtonArrangement.ROW ? ApproveConfirmRow() : ApproveConfirmSequential()\n}\n\nexport default ApproveConfirmButtons\n","import { useEffect, useReducer, useRef } from 'react'\nimport { noop } from 'lodash'\nimport { useWeb3React } from '@web3-react/core'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\n\ntype Web3Payload = Record<string, unknown> | null\n\ntype LoadingState = 'idle' | 'loading' | 'success' | 'fail'\n\ntype Action =\n  | { type: 'requires_approval' }\n  | { type: 'approve_sending' }\n  | { type: 'approve_receipt'; payload: Web3Payload }\n  | { type: 'approve_error'; payload: Web3Payload }\n  | { type: 'confirm_sending' }\n  | { type: 'confirm_receipt'; payload: Web3Payload }\n  | { type: 'confirm_error'; payload: Web3Payload }\n\ninterface State {\n  approvalState: LoadingState\n  approvalReceipt: Web3Payload\n  approvalError: Web3Payload\n  confirmState: LoadingState\n  confirmReceipt: Web3Payload\n  confirmError: Web3Payload\n}\n\nconst initialState: State = {\n  approvalState: 'idle',\n  approvalReceipt: null,\n  approvalError: null,\n  confirmState: 'idle',\n  confirmReceipt: null,\n  confirmError: null,\n}\n\nconst reducer = (state: State, actions: Action): State => {\n  switch (actions.type) {\n    case 'requires_approval':\n      return {\n        ...state,\n        approvalState: 'success',\n      }\n    case 'approve_sending':\n      return {\n        ...state,\n        approvalState: 'loading',\n      }\n    case 'approve_receipt':\n      return {\n        ...state,\n        approvalState: 'success',\n        approvalReceipt: actions.payload,\n      }\n    case 'approve_error':\n      return {\n        ...state,\n        approvalState: 'fail',\n        approvalError: actions.payload,\n      }\n    case 'confirm_sending':\n      return {\n        ...state,\n        confirmState: 'loading',\n      }\n    case 'confirm_receipt':\n      return {\n        ...state,\n        confirmState: 'success',\n        confirmReceipt: actions.payload,\n      }\n    case 'confirm_error':\n      return {\n        ...state,\n        confirmState: 'fail',\n        confirmError: actions.payload,\n      }\n    default:\n      return state\n  }\n}\n\ntype ContractHandler = () => any\n\ninterface ApproveConfirmTransaction {\n  onApprove: ContractHandler\n  onConfirm: ContractHandler\n  onRequiresApproval?: () => Promise<boolean>\n  onSuccess: (state: State) => void\n  onApproveSuccess?: (state: State) => void\n}\n\nconst useApproveConfirmTransaction = ({\n  onApprove,\n  onConfirm,\n  onRequiresApproval,\n  onSuccess = noop,\n  onApproveSuccess = noop,\n}: ApproveConfirmTransaction) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const handlePreApprove = useRef(onRequiresApproval)\n  const { toastError } = useToast()\n\n  // Check if approval is necessary, re-check if account changes\n  useEffect(() => {\n    if (account && handlePreApprove.current) {\n      handlePreApprove.current().then((result) => {\n        if (result) {\n          dispatch({ type: 'requires_approval' })\n        }\n      })\n    }\n  }, [account, handlePreApprove, dispatch])\n\n  return {\n    isApproving: state.approvalState === 'loading',\n    isApproved: state.approvalState === 'success',\n    isConfirming: state.confirmState === 'loading',\n    isConfirmed: state.confirmState === 'success',\n    approvalReceipt: state.approvalReceipt,\n    approvalError: state.approvalError,\n    confirmReceipt: state.confirmReceipt,\n    confirmError: state.confirmError,\n    handleApprove: () => {\n      onApprove()\n        .on('sending', () => {\n          dispatch({ type: 'approve_sending' })\n        })\n        .on('receipt', (payload: Web3Payload) => {\n          dispatch({ type: 'approve_receipt', payload })\n          onApproveSuccess(state)\n        })\n        .on('error', (error: Web3Payload) => {\n          dispatch({ type: 'approve_error', payload: error })\n          console.error('An error occurred approving transaction:', error)\n          toastError(t('An error occurred approving transaction'))\n        })\n    },\n    handleConfirm: () => {\n      onConfirm()\n        .on('sending', () => {\n          dispatch({ type: 'confirm_sending' })\n        })\n        .on('receipt', (payload: Web3Payload) => {\n          dispatch({ type: 'confirm_receipt', payload })\n          onSuccess(state)\n        })\n        .on('error', (error: Web3Payload) => {\n          dispatch({ type: 'confirm_error', payload: error })\n          console.error('An error occurred confirming transaction:', error)\n          toastError(t('An error occurred confirming transaction'))\n        })\n    },\n  }\n}\n\nexport default useApproveConfirmTransaction\n","import styled from 'styled-components'\n\nconst HeaderWrapper = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 24px;\n`\n\nexport default HeaderWrapper\n","import React from 'react'\nimport { NoProfileAvatarIcon } from '@pancakeswap/uikit'\nimport { Profile } from 'state/types'\nimport styled from 'styled-components'\n\nexport interface ProfileAvatarProps {\n  profile: Profile\n}\n\nconst TeamAvatar = styled.img`\n  border: 1px solid ${({ theme }) => theme.card.background};\n  border-radius: 50%;\n  bottom: 0px;\n  position: absolute;\n  right: 0px;\n  min-width: 20px;\n  min-height: 20px;\n  width: 37.5%;\n  height: 37.5%;\n  z-index: 5;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    border-width: 2px;\n  }\n`\n\nconst AvatarWrapper = styled.div<{ bg: string }>`\n  background: url('${({ bg }) => bg}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 100%;\n  height: 100%;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n// TODO: replace with no profile avatar icon\nconst AvatarInactive = styled(NoProfileAvatarIcon)`\n  width: 100%;\n  height: 100%;\n`\n\nconst ProfileAvatar: React.FC<ProfileAvatarProps> = ({ profile }) => {\n  return (\n    <AvatarWrapper bg={`/images/nfts/${profile.nft?.images?.md}`}>\n      {!profile.isActive && <AvatarInactive />}\n      <TeamAvatar src={`/images/teams/${profile.team.images.alt}`} alt={profile.team.name} />\n    </AvatarWrapper>\n  )\n}\n\nexport default ProfileAvatar\n","import React from 'react'\nimport { BunnyPlaceholderIcon, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ComingSoonProps {\n  children?: React.ReactNode\n}\n\nconst ComingSoon: React.FC<ComingSoonProps> = ({ children }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" p=\"24px\">\n      <BunnyPlaceholderIcon width=\"72px\" height=\"72px\" />\n      <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\n        {children || t('Coming Soon!')}\n      </Heading>\n    </Flex>\n  )\n}\n\nexport default ComingSoon\n","import styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\n\nconst SecondaryCard = styled(Text)`\n  border: 2px solid ${({ theme }) => theme.colors.tertiary};\n  border-radius: 16px;\n`\n\nSecondaryCard.defaultProps = {\n  p: '24px',\n}\n\nexport default SecondaryCard\n","import React, { ElementType, ReactNode } from 'react'\nimport { Flex, Heading, Text, TextProps } from '@pancakeswap/uikit'\nimport SecondaryCard from './SecondaryCard'\n\ninterface StatBoxProps extends TextProps {\n  icon: ElementType\n  title: ReactNode\n  subtitle: ReactNode\n  isDisabled?: boolean\n}\n\nconst StatBox: React.FC<StatBoxProps> = ({ icon: Icon, title, subtitle, isDisabled = false, ...props }) => {\n  return (\n    <SecondaryCard {...props}>\n      <Flex alignItems=\"start\">\n        <Icon width=\"44px\" mr=\"24px\" color={isDisabled ? 'textDisabled' : 'currentColor'} />\n        <div>\n          <Heading as=\"h3\" scale=\"xl\" color={isDisabled ? 'textDisabled' : 'text'}>\n            {title}\n          </Heading>\n          <Text textTransform=\"uppercase\" color={isDisabled ? 'textDisabled' : 'textSubtle'} fontSize=\"12px\" bold>\n            {subtitle}\n          </Text>\n        </div>\n      </Flex>\n    </SecondaryCard>\n  )\n}\n\nexport default StatBox\n","import React, { ChangeEvent, useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Text,\n  Input as UIKitInput,\n  Button,\n  AutoRenewIcon,\n  CheckmarkIcon,\n  Flex,\n  WarningIcon,\n  useModal,\n  Skeleton,\n  Checkbox,\n} from '@pancakeswap/uikit'\nimport { parseISO, formatDistance } from 'date-fns'\nimport { useWeb3React } from '@web3-react/core'\nimport useToast from 'hooks/useToast'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useTranslation } from 'contexts/Localization'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport debounce from 'lodash/debounce'\nimport ConfirmProfileCreationModal from '../components/ConfirmProfileCreationModal'\nimport useProfileCreation from './contexts/hook'\nimport { USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, REGISTER_COST } from './config'\n\nenum ExistingUserState {\n  IDLE = 'idle', // initial state\n  CREATED = 'created', // username has already been created\n  NEW = 'new', // username has not been created\n}\n\nconst profileApiUrl = process.env.REACT_APP_API_PROFILE\nconst minimumCakeToRegister = new BigNumber(REGISTER_COST).multipliedBy(DEFAULT_TOKEN_DECIMAL)\n\nconst InputWrap = styled.div`\n  position: relative;\n  max-width: 240px;\n`\n\nconst Input = styled(UIKitInput)`\n  padding-right: 40px;\n`\n\nconst Indicator = styled(Flex)`\n  align-items: center;\n  height: 24px;\n  justify-content: center;\n  margin-top: -12px;\n  position: absolute;\n  right: 16px;\n  top: 50%;\n  width: 24px;\n`\n\nconst UserName: React.FC = () => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const { teamId, selectedNft, userName, actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const { t } = useTranslation()\n  const { account, library } = useWeb3React()\n  const { toastError } = useToast()\n  const web3 = useWeb3()\n  const [existingUserState, setExistingUserState] = useState<ExistingUserState>(ExistingUserState.IDLE)\n  const [isValid, setIsValid] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [message, setMessage] = useState('')\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeToRegister)\n  const [onPresentConfirmProfileCreation] = useModal(\n    <ConfirmProfileCreationModal\n      userName={userName}\n      selectedNft={selectedNft}\n      account={account}\n      teamId={teamId}\n      minimumCakeRequired={minimumCakeRequired}\n      allowance={allowance}\n    />,\n    false,\n  )\n  const isUserCreated = existingUserState === ExistingUserState.CREATED\n\n  const checkUsernameValidity = debounce(async (value: string) => {\n    try {\n      setIsLoading(true)\n      const res = await fetch(`${profileApiUrl}/api/users/valid/${value}`)\n\n      if (res.ok) {\n        setIsValid(true)\n        setMessage('')\n      } else {\n        const data = await res.json()\n        setIsValid(false)\n        setMessage(data?.error?.message)\n      }\n    } finally {\n      setIsLoading(false)\n    }\n  }, 200)\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n    actions.setUserName(value)\n    checkUsernameValidity(value)\n  }\n\n  const handleConfirm = async () => {\n    try {\n      setIsLoading(true)\n\n      const signature = library?.bnbSign\n        ? (await library.bnbSign(account, userName))?.signature\n        : // web3.utils.utf8ToHex(\"...\") will not be called here on username if hex like string\n          // https://github.com/ChainSafe/web3.js/blob/5d027191c5cb7ffbcd44083528bdab19b4e14744/packages/web3-core-helpers/src/formatters.js#L225\n          // Last param is the password, and is null to request a signature in the wallet\n          await web3.eth.personal.sign(web3.utils.utf8ToHex(userName), account, null)\n\n      const response = await fetch(`${profileApiUrl}/api/users/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          address: account,\n          username: userName,\n          signature,\n        }),\n      })\n\n      if (response.ok) {\n        setExistingUserState(ExistingUserState.CREATED)\n      } else {\n        const data = await response.json()\n        toastError(t('Error'), data?.error?.message)\n      }\n    } catch (error) {\n      toastError(error?.message ? error.message : JSON.stringify(error))\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleAcknowledge = () => setIsAcknowledged(!isAcknowledged)\n\n  // Perform an initial check to see if the wallet has already created a username\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const response = await fetch(`${profileApiUrl}/api/users/${account}`)\n        const data = await response.json()\n\n        if (response.ok) {\n          const dateCreated = formatDistance(parseISO(data.created_at), new Date())\n          setMessage(t('Created %dateCreated% ago', { dateCreated }))\n\n          actions.setUserName(data.username)\n          setExistingUserState(ExistingUserState.CREATED)\n          setIsValid(true)\n        } else {\n          setExistingUserState(ExistingUserState.NEW)\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Unable to verify username'))\n      }\n    }\n\n    if (account) {\n      fetchUser()\n    }\n  }, [account, setExistingUserState, setIsValid, setMessage, actions, toastError, t])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 4 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Your Name')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This name will be shown in team leaderboards and search results as long as your profile is active.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Set Your Name')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'Your name must be at least 3 and at most 15 standard letters and numbers long. You can’t change this once you click Confirm.',\n            )}\n          </Text>\n          {existingUserState === ExistingUserState.IDLE ? (\n            <Skeleton height=\"40px\" width=\"240px\" />\n          ) : (\n            <InputWrap>\n              <Input\n                onChange={handleChange}\n                isWarning={userName && !isValid}\n                isSuccess={userName && isValid}\n                minLength={USERNAME_MIN_LENGTH}\n                maxLength={USERNAME_MAX_LENGTH}\n                disabled={isUserCreated}\n                placeholder={t('Enter your name...')}\n                value={userName}\n              />\n              <Indicator>\n                {isLoading && <AutoRenewIcon spin />}\n                {!isLoading && isValid && userName && <CheckmarkIcon color=\"success\" />}\n                {!isLoading && !isValid && userName && <WarningIcon color=\"failure\" />}\n              </Indicator>\n            </InputWrap>\n          )}\n          <Text color=\"textSubtle\" fontSize=\"14px\" py=\"4px\" mb=\"16px\" style={{ minHeight: '30px' }}>\n            {message}\n          </Text>\n          <Text as=\"p\" color=\"failure\" mb=\"8px\">\n            {t(\n              \"Only reuse a name from other social media if you're OK with people viewing your wallet. You can't change your name once you click Confirm.\",\n            )}\n          </Text>\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={isAcknowledged} onChange={handleAcknowledge} />\n              </div>\n              <Text ml=\"8px\">{t('I understand that people can view my wallet if they know my username')}</Text>\n            </Flex>\n          </label>\n          <Button onClick={handleConfirm} disabled={!isValid || isUserCreated || isLoading || !isAcknowledged}>\n            {t('Confirm')}\n          </Button>\n        </CardBody>\n      </Card>\n      <Button onClick={onPresentConfirmProfileCreation} disabled={!isValid || !isUserCreated}>\n        {t('Complete Profile')}\n      </Button>\n      {!hasMinimumCakeRequired && (\n        <Text color=\"failure\" mt=\"16px\">\n          {t('A minimum of %num% CAKE is required', { num: REGISTER_COST })}\n        </Text>\n      )}\n    </>\n  )\n}\n\nexport default UserName\n","export const MINT_COST = 1\nexport const REGISTER_COST = 0.5\nexport const ALLOWANCE_MULTIPLIER = 5\nexport const STARTER_BUNNY_IDENTIFIERS = ['sleepy', 'dollop', 'twinkle', 'churro', 'sunny']\nexport const USERNAME_MIN_LENGTH = 3\nexport const USERNAME_MAX_LENGTH = 15\n","import React, { createContext, useEffect, useMemo, useReducer } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBunnyFactoryContract } from 'utils/contractHelpers'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { MINT_COST, REGISTER_COST, ALLOWANCE_MULTIPLIER } from '../config'\nimport { Actions, State, ContextType } from './types'\n\nconst totalCost = MINT_COST + REGISTER_COST\nconst allowance = totalCost * ALLOWANCE_MULTIPLIER\n\nconst initialState: State = {\n  isInitialized: false,\n  currentStep: 0,\n  teamId: null,\n  selectedNft: {\n    nftAddress: null,\n    tokenId: null,\n  },\n  userName: '',\n  minimumCakeRequired: new BigNumber(totalCost).multipliedBy(DEFAULT_TOKEN_DECIMAL),\n  allowance: new BigNumber(allowance).multipliedBy(DEFAULT_TOKEN_DECIMAL),\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'initialize':\n      return {\n        ...state,\n        isInitialized: true,\n        currentStep: action.step,\n      }\n    case 'next_step':\n      return {\n        ...state,\n        currentStep: state.currentStep + 1,\n      }\n    case 'set_team':\n      return {\n        ...state,\n        teamId: action.teamId,\n      }\n    case 'set_selected_nft':\n      return {\n        ...state,\n        selectedNft: {\n          tokenId: action.tokenId,\n          nftAddress: action.nftAddress,\n        },\n      }\n    case 'set_username':\n      return {\n        ...state,\n        userName: action.userName,\n      }\n    default:\n      return state\n  }\n}\n\nexport const ProfileCreationContext = createContext<ContextType>(null)\n\nconst ProfileCreationProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n\n  // Initial checks\n  useEffect(() => {\n    let isSubscribed = true\n\n    const fetchData = async () => {\n      const bunnyFactoryContract = getBunnyFactoryContract()\n      const canMint = await bunnyFactoryContract.methods.canMint(account).call()\n      dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n\n      // When changing wallets quickly unmounting before the hasClaim finished causes a React error\n      if (isSubscribed) {\n        dispatch({ type: 'initialize', step: canMint ? 0 : 1 })\n      }\n    }\n\n    if (account) {\n      fetchData()\n    }\n\n    return () => {\n      isSubscribed = false\n    }\n  }, [account, dispatch])\n\n  const actions: ContextType['actions'] = useMemo(\n    () => ({\n      nextStep: () => dispatch({ type: 'next_step' }),\n      setTeamId: (teamId: number) => dispatch({ type: 'set_team', teamId }),\n      setSelectedNft: (tokenId: number, nftAddress: string) =>\n        dispatch({ type: 'set_selected_nft', tokenId, nftAddress }),\n      setUserName: (userName: string) => dispatch({ type: 'set_username', userName }),\n    }),\n    [dispatch],\n  )\n\n  return <ProfileCreationContext.Provider value={{ ...state, actions }}>{children}</ProfileCreationContext.Provider>\n}\n\nexport default ProfileCreationProvider\n","import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { Breadcrumbs, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Wrapper = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 24px;\n`\n\nconst steps = ['Get Starter Collectible', 'Set Profile Picture', 'Join Team', 'Set Name']\n\nconst Header: React.FC = () => {\n  const { t } = useTranslation()\n  const { currentStep } = useContext(ProfileCreationContext)\n\n  return (\n    <Wrapper>\n      <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"8px\">\n        {t('Profile Setup')}\n      </Heading>\n      <Heading as=\"h2\" scale=\"lg\" mb=\"8px\">\n        {t('Show off your stats and collectibles with your unique profile')}\n      </Heading>\n      <Text color=\"textSubtle\" mb=\"24px\">\n        {t('Total cost: 1.5 CAKE')}\n      </Text>\n      <Breadcrumbs>\n        {steps.map((translationKey, index) => {\n          return (\n            <Text key={translationKey} color={index <= currentStep ? 'text' : 'textDisabled'}>\n              {t(translationKey)}\n            </Text>\n          )\n        })}\n      </Breadcrumbs>\n    </Wrapper>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport UnlockButton from 'components/UnlockButton'\n\nconst WalletNotConnected = () => {\n  const { t } = useTranslation()\n\n  return (\n    <div>\n      <Heading scale=\"xl\" mb=\"8px\">\n        {t('Oops!')}\n      </Heading>\n      <Text as=\"p\" mb=\"16px\">\n        {t('Please connect your wallet to continue')}\n      </Text>\n      <UnlockButton />\n    </div>\n  )\n}\n\nexport default WalletNotConnected\n","import BigNumber from 'bignumber.js'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useTokenBalance from './useTokenBalance'\n\n/**\n * A hook to check if a wallet's CAKE balance is at least the amount passed in\n */\nconst useHasCakeBalance = (minimumBalance: BigNumber) => {\n  const { balance: cakeBalance } = useTokenBalance(getCakeAddress())\n  return cakeBalance.gte(minimumBalance)\n}\n\nexport default useHasCakeBalance\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Radio } from '@pancakeswap/uikit'\n\ninterface SelectionCardProps {\n  name: string\n  value: string | number\n  isChecked?: boolean\n  onChange: (val: any) => void\n  image: string\n  disabled?: boolean\n}\n\nconst StyledCard = styled(Card)`\n  ${({ isSuccess }) => !isSuccess && 'box-shadow: none;'}\n  border-radius: 16px;\n  margin-bottom: 16px;\n`\n\nconst Label = styled.label<{ isDisabled: boolean }>`\n  cursor: ${({ isDisabled }) => (isDisabled ? 'not-allowed' : 'pointer')};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  opacity: ${({ isDisabled }) => (isDisabled ? '0.6' : '1')};\n`\n\nconst Body = styled.div`\n  align-items: center;\n  border: 2px solid ${({ theme }) => theme.colors.tertiary};\n  border-radius: 16px 0 0 16px;\n  display: flex;\n  flex-grow: 1;\n  height: 80px;\n  padding: 8px 16px;\n`\n\nconst Children = styled.div`\n  margin-left: 16px;\n`\n\nconst StyledBackgroundImage = styled.div<{ src: string }>`\n  align-self: stretch;\n  background-image: url('${({ src }) => src}');\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 80px;\n`\n\nconst SelectionCard: React.FC<SelectionCardProps> = ({\n  name,\n  value,\n  isChecked = false,\n  image,\n  onChange,\n  disabled,\n  children,\n  ...props\n}) => {\n  return (\n    <StyledCard isSuccess={isChecked} isDisabled={disabled} mb=\"16px\" {...props}>\n      <Label isDisabled={disabled}>\n        <Body>\n          <Radio\n            name={name}\n            checked={isChecked}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n            disabled={disabled}\n            style={{ flex: 'none' }}\n          />\n          <Children>{children}</Children>\n        </Body>\n        <StyledBackgroundImage src={image} />\n      </Label>\n    </StyledCard>\n  )\n}\n\nexport default SelectionCard\n","import React from 'react'\nimport { ArrowForwardIcon, Button, ButtonProps } from '@pancakeswap/uikit'\n\nconst NextStepButton: React.FC<ButtonProps> = (props) => {\n  return <Button endIcon={<ArrowForwardIcon color=\"currentColor\" />} {...props} />\n}\n\nexport default NextStepButton\n","import { useContext } from 'react'\nimport { ProfileCreationContext } from './ProfileCreationProvider'\n\nconst useProfileCreation = () => {\n  return useContext(ProfileCreationContext)\n}\n\nexport default useProfileCreation\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport { Nft } from 'config/constants/types'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport nftList from 'config/constants/nfts'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport ApproveConfirmButtons from '../components/ApproveConfirmButtons'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_BUNNY_IDENTIFIERS } from './config'\n\nconst nfts = nftList.filter((nft) => STARTER_BUNNY_IDENTIFIERS.includes(nft.identifier))\nconst minimumCakeBalanceToMint = new BigNumber(MINT_COST).multipliedBy(DEFAULT_TOKEN_DECIMAL)\n\nconst Mint: React.FC = () => {\n  const [variationId, setVariationId] = useState<Nft['variationId']>(null)\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const { t } = useTranslation()\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeBalanceToMint)\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        // TODO: Move this to a helper, this check will be probably be used many times\n        try {\n          const response = await cakeContract.methods.allowance(account, bunnyFactoryContract.options.address).call()\n          const currentAllowance = new BigNumber(response)\n          return currentAllowance.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return cakeContract.methods\n          .approve(bunnyFactoryContract.options.address, allowance.toJSON())\n          .send({ from: account })\n      },\n      onConfirm: () => {\n        return bunnyFactoryContract.methods.mintNFT(variationId).send({ from: account })\n      },\n      onSuccess: () => actions.nextStep(),\n    })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 1 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{t('Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{t('This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {t('You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {t('Cost: %num% CAKE', { num: MINT_COST })}\n          </Text>\n          {nfts.map((nft) => {\n            const handleChange = (value: string) => setVariationId(Number(value))\n\n            return (\n              <SelectionCard\n                key={nft.identifier}\n                name=\"mintStarter\"\n                value={nft.variationId}\n                image={`/images/nfts/${nft.images.md}`}\n                isChecked={variationId === nft.variationId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {t('A minimum of %num% CAKE is required', { num: MINT_COST })}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={variationId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n","import React, { useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { getAddressByType } from 'utils/collectibles'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetCollectibles } from 'state/hooks'\nimport useToast from 'hooks/useToast'\nimport { useERC721 } from 'hooks/useContract'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst ProfilePicture: React.FC = () => {\n  const [isApproved, setIsApproved] = useState(false)\n  const [isApproving, setIsApproving] = useState(false)\n  const { selectedNft, actions } = useContext(ProfileCreationContext)\n  const { t } = useTranslation()\n  const { isLoading, nftsInWallet, tokenIds } = useGetCollectibles()\n  const contract = useERC721(selectedNft.nftAddress)\n  const { account } = useWeb3React()\n  const { toastError } = useToast()\n\n  const handleApprove = () => {\n    contract.methods\n      .approve(getPancakeProfileAddress(), selectedNft.tokenId)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsApproving(true)\n      })\n      .once('receipt', () => {\n        setIsApproving(false)\n        setIsApproved(true)\n      })\n      .once('error', (error) => {\n        toastError(t('Error'), error?.message)\n        setIsApproving(false)\n      })\n  }\n\n  if (!isLoading && nftsInWallet.length === 0) {\n    return (\n      <>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Oops!')}\n        </Heading>\n        <Text bold fontSize=\"20px\" mb=\"24px\">\n          {t('We couldn’t find any Pancake Collectibles in your wallet.')}\n        </Text>\n        <Text as=\"p\">\n          {t(\n            'You need a Pancake Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.',\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 2 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Profile Picture')}\n      </Heading>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose collectible')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Only approved Pancake Collectibles can be used.')}\n            <Link to=\"/collectibles\" style={{ marginLeft: '4px' }}>\n              {t('See the list >')}\n            </Link>\n          </Text>\n          <NftWrapper>\n            {isLoading ? (\n              <Skeleton height=\"80px\" mb=\"16px\" />\n            ) : (\n              nftsInWallet.map((walletNft) => {\n                const [firstTokenId] = tokenIds[walletNft.identifier]\n                const address = getAddressByType(walletNft.type)\n\n                return (\n                  <SelectionCard\n                    name=\"profilePicture\"\n                    key={walletNft.identifier}\n                    value={firstTokenId}\n                    image={`/images/nfts/${walletNft.images.md}`}\n                    isChecked={firstTokenId === selectedNft.tokenId}\n                    onChange={(value: string) => actions.setSelectedNft(parseInt(value, 10), address)}\n                  >\n                    <Text bold>{walletNft.name}</Text>\n                  </SelectionCard>\n                )\n              })\n            )}\n          </NftWrapper>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Allow collectible to be locked')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t(\n              \"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\",\n            )}\n          </Text>\n          <Button\n            isLoading={isApproving}\n            disabled={isApproved || isApproving || selectedNft.tokenId === null}\n            onClick={handleApprove}\n            endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n          >\n            {t('Approve')}\n          </Button>\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={selectedNft.tokenId === null || !isApproved || isApproving}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default ProfilePicture\n","import React, { useMemo } from 'react'\nimport { Card, CardBody, CommunityIcon, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport shuffle from 'lodash/shuffle'\nimport { useTeams } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport SelectionCard from '../components/SelectionCard'\nimport NextStepButton from '../components/NextStepButton'\nimport useProfileCreation from './contexts/hook'\n\nconst Team: React.FC = () => {\n  const { teamId: currentTeamId, actions } = useProfileCreation()\n  const { t } = useTranslation()\n  const { teams } = useTeams()\n  const handleTeamSelection = (value: string) => actions.setTeamId(parseInt(value, 10))\n  const teamValues = useMemo(() => shuffle(Object.values(teams)), [teams])\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 3 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Join a Team')}\n      </Heading>\n      <Text as=\"p\" mb=\"24px\">\n        {t('It won’t be possible to undo the choice you make for the foreseeable future!')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Join a Team')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t(\n              'There’s currently no big difference between teams, and no benefit of joining one team over another for now. So pick whichever one you like!',\n            )}\n          </Text>\n          {teamValues &&\n            teamValues.map((team) => {\n              return (\n                <SelectionCard\n                  key={team.name}\n                  name=\"teams-selection\"\n                  value={team.id}\n                  isChecked={currentTeamId === team.id}\n                  image={`/images/teams/${team.images.md}`}\n                  onChange={handleTeamSelection}\n                  disabled={!team.isJoinable}\n                >\n                  <Text bold>{team.name}</Text>\n                  <Flex>\n                    <CommunityIcon mr=\"8px\" />\n                    <Text>{team.users.toLocaleString()}</Text>\n                  </Flex>\n                </SelectionCard>\n              )\n            })}\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={currentTeamId === null}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Team\n","import React from 'react'\nimport { Modal, Flex, Text } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake, useProfile } from 'hooks/useContract'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { REGISTER_COST } from '../ProfileCreation/config'\nimport ApproveConfirmButtons from './ApproveConfirmButtons'\nimport { State } from '../ProfileCreation/contexts/types'\n\ninterface Props {\n  userName: string\n  selectedNft: State['selectedNft']\n  account: string\n  teamId: number\n  minimumCakeRequired: BigNumber\n  allowance: BigNumber\n  onDismiss?: () => void\n}\n\nconst ConfirmProfileCreationModal: React.FC<Props> = ({\n  account,\n  teamId,\n  selectedNft,\n  minimumCakeRequired,\n  allowance,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n  const profileContract = useProfile()\n  const dispatch = useAppDispatch()\n  const { toastSuccess } = useToast()\n  const cakeContract = useCake()\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await cakeContract.methods.allowance(account, profileContract.options.address).call()\n          const currentAllowance = new BigNumber(response)\n          return currentAllowance.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return cakeContract.methods.approve(profileContract.options.address, allowance.toJSON()).send({ from: account })\n      },\n      onConfirm: () => {\n        return profileContract.methods\n          .createProfile(teamId, selectedNft.nftAddress, selectedNft.tokenId)\n          .send({ from: account })\n      },\n      onSuccess: async () => {\n        await dispatch(fetchProfile(account))\n        onDismiss()\n        toastSuccess(t('Profile created!'))\n      },\n    })\n\n  return (\n    <Modal title={t('Complete Profile')} onDismiss={onDismiss}>\n      <Text color=\"textSubtle\" mb=\"8px\">\n        {t('Submitting NFT to contract and confirming User Name and Team.')}\n      </Text>\n      <Flex justifyContent=\"space-between\" mb=\"16px\">\n        <Text>{t('Cost')}</Text>\n        <Text>{t('%num% CAKE', { num: REGISTER_COST })}</Text>\n      </Flex>\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n    </Modal>\n  )\n}\n\nexport default ConfirmProfileCreationModal\n","import { useReducer } from 'react'\n\nexport enum Views {\n  START = 'start',\n  CHANGE = 'change',\n  REMOVE = 'remove',\n  APPROVE = 'approve',\n}\n\nexport type Actions =\n  | {\n      type: 'set_view'\n      view: Views\n    }\n  | {\n      type: 'go_previous'\n    }\n\nexport interface State {\n  currentView: Views\n  previousView: Views | null\n}\n\nconst reducer = (state: State, action: Actions): State => {\n  switch (action.type) {\n    case 'set_view':\n      return {\n        ...state,\n        currentView: action.view,\n        previousView: state.currentView,\n      }\n    case 'go_previous':\n      return {\n        ...state,\n        currentView: state.previousView,\n        previousView: state.currentView,\n      }\n    default:\n      return state\n  }\n}\n\nexport interface UseEditProfileResponse extends State {\n  goToStart: () => void\n  goToChange: () => void\n  goToApprove: () => void\n  goToRemove: () => void\n  goPrevious: () => void\n}\n\nconst useEditProfile = (): UseEditProfileResponse => {\n  const [state, dispatch] = useReducer(reducer, {\n    currentView: Views.START,\n    previousView: null,\n  })\n\n  const goToStart = () => dispatch({ type: 'set_view', view: Views.START })\n  const goToChange = () => dispatch({ type: 'set_view', view: Views.CHANGE })\n  const goToRemove = () => dispatch({ type: 'set_view', view: Views.REMOVE })\n  const goToApprove = () => dispatch({ type: 'set_view', view: Views.APPROVE })\n  const goPrevious = () => dispatch({ type: 'go_previous' })\n\n  return { ...state, goToStart, goToChange, goToRemove, goToApprove, goPrevious }\n}\n\nexport default useEditProfile\n","import React, { useContext } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport NoWalletConnected from '../components/WalletNotConnected'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\nimport Mint from './Mint'\nimport ProfilePicture from './ProfilePicture'\nimport TeamSelection from './TeamSelection'\nimport UserName from './UserName'\n\nconst Steps = () => {\n  const { t } = useTranslation()\n  const { isInitialized, currentStep } = useContext(ProfileCreationContext)\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return <NoWalletConnected />\n  }\n\n  if (!isInitialized) {\n    return <div>{t('Loading...')}</div>\n  }\n\n  if (currentStep === 0) {\n    return <Mint />\n  }\n\n  if (currentStep === 1) {\n    return <ProfilePicture />\n  }\n\n  if (currentStep === 2) {\n    return <TeamSelection />\n  }\n\n  if (currentStep === 3) {\n    return <UserName />\n  }\n\n  return null\n}\n\nexport default Steps\n","import React from 'react'\nimport Page from 'components/layout/Page'\nimport Header from './Header'\nimport ProfileCreationProvider from './contexts/ProfileCreationProvider'\nimport Steps from './Steps'\n\nconst ProfileCreation = () => (\n  <ProfileCreationProvider>\n    <Page>\n      <Header />\n      <Steps />\n    </Page>\n  </ProfileCreationProvider>\n)\n\nexport default ProfileCreation\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { Modal, Text, InjectedModalProps, Button, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useToast from 'hooks/useToast'\nimport { useClaimRefundContract } from 'hooks/useContract'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimRefundContract } from 'utils/contractHelpers'\n\ninterface ClaimGiftProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nexport const useCanClaim = () => {\n  const [canClaim, setCanClaim] = useState(false)\n  const [refresh, setRefresh] = useState(1)\n  const { account } = useWeb3React()\n\n  const checkClaimStatus = useCallback(() => {\n    setRefresh((prevRefresh) => prevRefresh + 1)\n  }, [setRefresh])\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const claimRefundContract = getClaimRefundContract()\n      const walletCanClaim = await claimRefundContract.methods.canClaim(account).call()\n      setCanClaim(walletCanClaim)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, refresh, setCanClaim])\n\n  return { canClaim, checkClaimStatus }\n}\n\nconst ClaimGift: React.FC<ClaimGiftProps> = ({ onSuccess, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { canClaim } = useCanClaim()\n  const claimRefundContract = useClaimRefundContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleClick = () => {\n    claimRefundContract.methods\n      .getCakeBack()\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Success!'))\n        onSuccess()\n        onDismiss()\n      })\n      .on('error', (error) => {\n        setIsConfirming(false)\n        toastError(t('Error'), error?.message)\n      })\n  }\n\n  return (\n    <Modal title={t('Claim your Gift!')} onDismiss={onDismiss}>\n      <div style={{ maxWidth: '640px' }}>\n        <Text as=\"p\">{t('Thank you for being a day-one user of Pancake Profiles!')}</Text>\n        <Text as=\"p\" mb=\"8px\">\n          {t(\n            \"If you haven't already noticed, we made a mistake and the starter bunny you chose got mixed up and changed into another bunny. Oops!\",\n          )}\n        </Text>\n        <Text as=\"p\">{t('To make it up to you, we’ll refund you the full 4 CAKE it cost to make your bunny.')}</Text>\n        <Text as=\"p\" mb=\"8px\">\n          {t('We’re also preparing an all-new collectible for you to claim (for free!) in the near future.')}\n        </Text>\n        <Text as=\"p\" mb=\"24px\">\n          {t(\n            'Once you claim the refund, you can make another account with another wallet, mint a new bunny, and send it to your main account via the NFT page.',\n          )}\n        </Text>\n        <Button\n          endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          isLoading={isConfirming}\n          onClick={handleClick}\n          disabled={!canClaim}\n        >\n          {t('Claim Your CAKE')}\n        </Button>\n      </div>\n    </Modal>\n  )\n}\n\nexport default ClaimGift\n","import { useEffect, useState } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useToast from './useToast'\n\nconst useGetProfileCosts = () => {\n  const { t } = useTranslation()\n  const [costs, setCosts] = useState({\n    numberCakeToReactivate: BIG_ZERO,\n    numberCakeToRegister: BIG_ZERO,\n    numberCakeToUpdate: BIG_ZERO,\n  })\n  const { toastError } = useToast()\n\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const profileContract = getProfileContract()\n        const [numberCakeToReactivate, numberCakeToRegister, numberCakeToUpdate] = await makeBatchRequest([\n          profileContract.methods.numberCakeToReactivate().call,\n          profileContract.methods.numberCakeToRegister().call,\n          profileContract.methods.numberCakeToUpdate().call,\n        ])\n\n        setCosts({\n          numberCakeToReactivate: new BigNumber(numberCakeToReactivate as string),\n          numberCakeToRegister: new BigNumber(numberCakeToRegister as string),\n          numberCakeToUpdate: new BigNumber(numberCakeToUpdate as string),\n        })\n      } catch (error) {\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'))\n      }\n    }\n\n    fetchCosts()\n  }, [setCosts, toastError, t])\n\n  return costs\n}\n\nexport default useGetProfileCosts\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Flex, Text, InjectedModalProps } from '@pancakeswap/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { useCake } from 'hooks/useContract'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetProfileCosts from 'hooks/useGetProfileCosts'\nimport useHasCakeBalance from 'hooks/useHasCakeBalance'\nimport { useProfile } from 'state/hooks'\nimport { UseEditProfileResponse } from './reducer'\nimport ProfileAvatar from '../ProfileAvatar'\n\ninterface StartPageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n  goToRemove: UseEditProfileResponse['goToRemove']\n  goToApprove: UseEditProfileResponse['goToApprove']\n}\n\nconst DangerOutline = styled(Button).attrs({ variant: 'secondary' })`\n  border-color: ${({ theme }) => theme.colors.failure};\n  color: ${({ theme }) => theme.colors.failure};\n  margin-bottom: 24px;\n\n  &:hover:not(:disabled):not(.button--disabled):not(:active) {\n    border-color: ${({ theme }) => theme.colors.failure};\n    opacity: 0.8;\n  }\n`\n\nconst AvatarWrapper = styled.div`\n  height: 64px;\n  width: 64px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 128px;\n    width: 128px;\n  }\n`\n\nconst StartPage: React.FC<StartPageProps> = ({ goToApprove, goToChange, goToRemove, onDismiss }) => {\n  const [needsApproval, setNeedsApproval] = useState(null)\n  const { profile } = useProfile()\n  const { numberCakeToUpdate, numberCakeToReactivate } = useGetProfileCosts()\n  const minimumCakeRequired = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n  const hasMinimumCakeRequired = useHasCakeBalance(minimumCakeRequired)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n\n  /**\n   * Check if the wallet has the required CAKE allowance to change their profile pic or reactivate\n   * If they don't, we send them to the approval screen first\n   */\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      const response = await cakeContract.methods.allowance(account, getPancakeProfileAddress()).call()\n      const currentAllowance = new BigNumber(response)\n      setNeedsApproval(currentAllowance.lt(cost))\n    }\n\n    if (account) {\n      checkApprovalStatus()\n    }\n  }, [account, cost, setNeedsApproval, cakeContract])\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n      <AvatarWrapper>\n        <ProfileAvatar profile={profile} />\n      </AvatarWrapper>\n      <Flex alignItems=\"center\" style={{ height: '48px' }} justifyContent=\"center\">\n        <Text as=\"p\" color=\"failure\">\n          {!hasMinimumCakeRequired &&\n            t('%minimum% CAKE required to change profile pic', { minimum: getFullDisplayBalance(minimumCakeRequired) })}\n        </Text>\n      </Flex>\n      {profile.isActive ? (\n        <>\n          <Button\n            width=\"100%\"\n            mb=\"8px\"\n            onClick={needsApproval === true ? goToApprove : goToChange}\n            disabled={!hasMinimumCakeRequired || needsApproval === null}\n          >\n            {t('Change Profile Pic')}\n          </Button>\n          <DangerOutline width=\"100%\" onClick={goToRemove}>\n            {t('Remove Profile Pic')}\n          </DangerOutline>\n        </>\n      ) : (\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={needsApproval === true ? goToApprove : goToChange}\n          disabled={!hasMinimumCakeRequired || needsApproval === null}\n        >\n          {t('Reactivate Profile')}\n        </Button>\n      )}\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default StartPage\n","import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Checkbox, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetProfileCosts from 'hooks/useGetProfileCosts'\nimport { useAppDispatch } from 'state'\nimport { useProfile } from 'state/hooks'\nimport { fetchProfile } from 'state/profile'\nimport useToast from 'hooks/useToast'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useProfile as useProfileContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\ntype PauseProfilePageProps = InjectedModalProps\n\nconst PauseProfilePage: React.FC<PauseProfilePageProps> = ({ onDismiss }) => {\n  const [isAcknowledged, setIsAcknowledged] = useState(false)\n  const [isConfirming, setIsConfirming] = useState(false)\n  const { profile } = useProfile()\n  const { numberCakeToReactivate } = useGetProfileCosts()\n  const { t } = useTranslation()\n  const pancakeProfileContract = useProfileContract()\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const dispatch = useAppDispatch()\n\n  const handleChange = () => setIsAcknowledged(!isAcknowledged)\n\n  const handleDeactivateProfile = () => {\n    pancakeProfileContract.methods\n      .pauseProfile()\n      .send({ from: account })\n      .on('sending', () => {\n        setIsConfirming(true)\n      })\n      .on('receipt', async () => {\n        // Re-fetch profile\n        await dispatch(fetchProfile(account))\n        toastSuccess(t('Profile Paused!'))\n\n        onDismiss()\n      })\n      .on('error', (error) => {\n        toastError(t('Error'), error?.message)\n        setIsConfirming(false)\n      })\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <>\n      <Text as=\"p\" color=\"failure\" mb=\"24px\">\n        {t('This will suspend your profile and send your Collectible back to your wallet')}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t(\n          \"While your profile is suspended, you won't be able to earn points, but your achievements and points will stay associated with your profile\",\n        )}\n      </Text>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t('Cost to reactivate in the future: %cost% CAKE', { cost: getBalanceNumber(numberCakeToReactivate) })}\n      </Text>\n      <label htmlFor=\"acknowledgement\" style={{ cursor: 'pointer', display: 'block', marginBottom: '24px' }}>\n        <Flex alignItems=\"center\">\n          <Checkbox id=\"acknowledgement\" checked={isAcknowledged} onChange={handleChange} scale=\"sm\" />\n          <Text ml=\"8px\">{t('I understand')}</Text>\n        </Flex>\n      </label>\n      <Button\n        width=\"100%\"\n        isLoading={isConfirming}\n        endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        disabled={!isAcknowledged || isConfirming}\n        onClick={handleDeactivateProfile}\n        mb=\"8px\"\n      >\n        {t('Confirm')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss}>\n        {t('Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default PauseProfilePage\n","import React, { useState } from 'react'\nimport { Button, InjectedModalProps, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetCollectibles, useProfile } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { fetchProfile } from 'state/profile'\nimport { getAddressByType } from 'utils/collectibles'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useERC721, useProfile as useProfileContract } from 'hooks/useContract'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport SelectionCard from '../SelectionCard'\nimport ApproveConfirmButtons from '../ApproveConfirmButtons'\n\ntype ChangeProfilePicPageProps = InjectedModalProps\n\nconst ChangeProfilePicPage: React.FC<ChangeProfilePicPageProps> = ({ onDismiss }) => {\n  const [selectedNft, setSelectedNft] = useState({\n    tokenId: null,\n    nftAddress: null,\n  })\n  const { t } = useTranslation()\n  const { isLoading, tokenIds, nftsInWallet } = useGetCollectibles()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const contract = useERC721(selectedNft.nftAddress)\n  const profileContract = useProfileContract()\n  const { account } = useWeb3React()\n  const { toastSuccess } = useToast()\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onApprove: () => {\n        return contract.methods.approve(getPancakeProfileAddress(), selectedNft.tokenId).send({ from: account })\n      },\n      onConfirm: () => {\n        if (!profile.isActive) {\n          return profileContract.methods\n            .reactivateProfile(selectedNft.nftAddress, selectedNft.tokenId)\n            .send({ from: account })\n        }\n\n        return profileContract.methods\n          .updateProfile(selectedNft.nftAddress, selectedNft.tokenId)\n          .send({ from: account })\n      },\n      onSuccess: async () => {\n        // Re-fetch profile\n        await dispatch(fetchProfile(account))\n        toastSuccess(t('Profile Updated!'))\n\n        onDismiss()\n      },\n    })\n\n  return (\n    <>\n      <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n        {t('Choose a new Collectible to use as your profile pic.')}\n      </Text>\n      {isLoading ? (\n        <Skeleton height=\"80px\" mb=\"16px\" />\n      ) : (\n        nftsInWallet.map((walletNft) => {\n          const [firstTokenId] = tokenIds[walletNft.identifier]\n          const handleChange = (value: string) => {\n            setSelectedNft({\n              tokenId: Number(value),\n              nftAddress: getAddressByType(walletNft.type),\n            })\n          }\n\n          return (\n            <SelectionCard\n              name=\"profilePicture\"\n              key={walletNft.identifier}\n              value={firstTokenId}\n              image={`/images/nfts/${walletNft.images.md}`}\n              isChecked={firstTokenId === selectedNft.tokenId}\n              onChange={handleChange}\n              disabled={isApproving || isConfirming || isConfirmed}\n            >\n              <Text bold>{walletNft.name}</Text>\n            </SelectionCard>\n          )\n        })\n      )}\n      {!isLoading && nftsInWallet.length === 0 && (\n        <>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t('Sorry! You don’t have any eligible Collectibles in your wallet to use!')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Make sure you have a Pancake Collectible in your wallet and try again!')}\n          </Text>\n        </>\n      )}\n      <ApproveConfirmButtons\n        isApproveDisabled={isConfirmed || isConfirming || isApproved || selectedNft.tokenId === null}\n        isApproving={isApproving}\n        isConfirmDisabled={!isApproved || isConfirmed || selectedNft.tokenId === null}\n        isConfirming={isConfirming}\n        onApprove={handleApprove}\n        onConfirm={handleConfirm}\n      />\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving || isConfirming}>\n        {t('Close Window')}\n      </Button>\n    </>\n  )\n}\n\nexport default ChangeProfilePicPage\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useProfile } from 'state/hooks'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useGetProfileCosts from 'hooks/useGetProfileCosts'\nimport { UseEditProfileResponse } from './reducer'\n\ninterface ApproveCakePageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n}\n\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\n  const [isApproving, setIsApproving] = useState(false)\n  const { profile } = useProfile()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { numberCakeToUpdate, numberCakeToReactivate } = useGetProfileCosts()\n  const cakeContract = useCake()\n  const { toastError } = useToast()\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(getPancakeProfileAddress(), cost.times(2).toJSON())\n      .send({ from: account })\n      .on('sending', () => {\n        setIsApproving(true)\n      })\n      .on('receipt', () => {\n        goToChange()\n      })\n      .on('error', (error) => {\n        toastError(t('Error'), error?.message)\n        setIsApproving(false)\n      })\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\n        <Text>{getFullDisplayBalance(cost)} CAKE</Text>\n      </Flex>\n      <Button\n        disabled={isApproving}\n        isLoading={isApproving}\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={handleApprove}\n      >\n        {t('Approve')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveCakePage\n","import React from 'react'\nimport { InjectedModalProps, Modal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useEditProfile, { Views } from './reducer'\nimport StartView from './StartView'\nimport PauseProfileView from './PauseProfileView'\nimport ChangeProfilePicView from './ChangeProfilePicView'\nimport ApproveCakeView from './ApproveCakeView'\n\ntype EditProfileModalProps = InjectedModalProps\n\nconst viewTitle = {\n  [Views.START]: 'Edit Profile',\n  [Views.CHANGE]: 'Change Profile Pic',\n  [Views.REMOVE]: 'Remove Profile Pic',\n  [Views.APPROVE]: 'Approve CAKE',\n}\n\nconst EditProfileModal: React.FC<EditProfileModalProps> = ({ onDismiss }) => {\n  const { currentView, goToChange, goToRemove, goToApprove, goPrevious } = useEditProfile()\n  const { t } = useTranslation()\n  const translationKey = viewTitle[currentView]\n\n  const isStartView = currentView === Views.START\n  const handleBack = isStartView ? null : () => goPrevious()\n\n  return (\n    <Modal title={t(translationKey)} onBack={handleBack} onDismiss={onDismiss} hideCloseButton={!isStartView}>\n      <div style={{ maxWidth: '400px' }}>\n        {currentView === Views.START && (\n          <StartView goToApprove={goToApprove} goToChange={goToChange} goToRemove={goToRemove} onDismiss={onDismiss} />\n        )}\n        {currentView === Views.REMOVE && <PauseProfileView onDismiss={onDismiss} />}\n        {currentView === Views.CHANGE && <ChangeProfilePicView onDismiss={onDismiss} />}\n        {currentView === Views.APPROVE && <ApproveCakeView goToChange={goToChange} onDismiss={onDismiss} />}\n      </div>\n    </Modal>\n  )\n}\n\nexport default EditProfileModal\n","import React from 'react'\nimport { Button, Flex, Heading, useModal, Won } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport ClaimNftAndCakeModal, { useCanClaim } from './ClaimGiftModal'\nimport HeaderWrapper from './HeaderWrapper'\nimport EditProfileModal from './EditProfileModal'\n\nconst ProfileHeader = () => {\n  const { t } = useTranslation()\n  const { canClaim, checkClaimStatus } = useCanClaim()\n  const [onPresentClaimGiftModal] = useModal(<ClaimNftAndCakeModal onSuccess={checkClaimStatus} />)\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n  const { hasProfile } = useProfile()\n\n  return (\n    <HeaderWrapper>\n      <Flex\n        flexDirection={['column', null, 'row']}\n        alignItems={['start', null, 'center']}\n        justifyContent=\"space-between\"\n      >\n        <div>\n          <Heading as=\"h1\" scale=\"xxl\" mb=\"8px\" color=\"secondary\">\n            {t('Your Profile')}\n          </Heading>\n          <Heading as=\"h2\" scale=\"lg\" mb=\"16px\">\n            {t('Check your stats and collect achievements')}\n          </Heading>\n          {hasProfile && <Button onClick={onEditProfileModal}>{t('Edit Profile')}</Button>}\n        </div>\n        {canClaim && (\n          <Button variant=\"tertiary\" onClick={onPresentClaimGiftModal} startIcon={<Won />}>\n            {t('You’ve got a gift to claim!')}\n          </Button>\n        )}\n      </Flex>\n    </HeaderWrapper>\n  )\n}\n\nexport default ProfileHeader\n","import React, { ImgHTMLAttributes } from 'react'\nimport styled from 'styled-components'\nimport { BunnyPlaceholderIcon } from '@pancakeswap/uikit'\n\ninterface AchievementAvatarProps extends ImgHTMLAttributes<HTMLImageElement> {\n  badge?: string\n}\n\nconst NoBadgePlaceholder = styled(BunnyPlaceholderIcon)`\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst StyledAchievementAvatar = styled.img`\n  border-radius: 50%;\n  height: 48px;\n  width: 48px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 64px;\n    width: 64px;\n  }\n`\n\nconst AchievementAvatar: React.FC<AchievementAvatarProps> = ({ badge, ...props }) => {\n  if (!badge) {\n    return <NoBadgePlaceholder />\n  }\n\n  return <StyledAchievementAvatar src={`/images/achievements/${badge}`} alt=\"achievement badge\" {...props} />\n}\n\nexport default AchievementAvatar\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementTitleType } from 'state/types'\n\ninterface AchievementTitleProps extends TextProps {\n  title: AchievementTitleType\n}\n\nconst AchievementTitle: React.FC<AchievementTitleProps> = ({ title, ...props }) => {\n  const { t } = useTranslation()\n\n  if (typeof title === 'string') {\n    return (\n      <Text bold {...props}>\n        {title}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = title\n\n  return (\n    <Text bold {...props}>\n      {t(key, data)}\n    </Text>\n  )\n}\n\nexport default AchievementTitle\n","import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { TranslatableText as AchievementDescriptionType } from 'state/types'\nimport styled from 'styled-components'\n\ninterface AchievementDescriptionProps extends TextProps {\n  description?: AchievementDescriptionType\n}\n\nconst Description = styled(Text).attrs({ as: 'p', fontSize: '14px' })`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    display: block;\n  }\n`\n\nconst AchievementDescription: React.FC<AchievementDescriptionProps> = ({ description, ...props }) => {\n  const { t } = useTranslation()\n\n  if (!description) {\n    return null\n  }\n\n  if (typeof description === 'string') {\n    return (\n      <Text as=\"p\" color=\"textSubtle\" fontSize=\"14px\" {...props}>\n        {description}\n      </Text>\n    )\n  }\n\n  const { key, data = {} } = description\n\n  return (\n    <Description color=\"textSubtle\" {...props}>\n      {t(key, data)}\n    </Description>\n  )\n}\n\nexport default AchievementDescription\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport AchievementAvatar from './AchievementAvatar'\nimport AchievementTitle from './AchievementTitle'\nimport AchievementDescription from './AchievementDescription'\n\ninterface AchievementCardProps {\n  achievement: Achievement\n}\n\nconst Details = styled(Flex)`\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  padding-left: 8px;\n  padding-right: 8px;\n`\n\nconst AchievementCard: React.FC<AchievementCardProps> = ({ achievement }) => {\n  return (\n    <Flex>\n      <AchievementAvatar badge={achievement.badge} />\n      <Details>\n        <AchievementTitle title={achievement.title} />\n        <AchievementDescription description={achievement.description} />\n      </Details>\n      <Flex alignItems=\"center\">\n        <PrizeIcon width=\"18px\" color=\"textSubtle\" mr=\"4px\" />\n        <Text color=\"textSubtle\">{achievement.points.toLocaleString()}</Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default AchievementCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAchievements } from 'state/hooks'\nimport AchievementCard from './AchievementCard'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-gap: 16px;\n  grid-template-columns: 1fr;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`\n\nconst AchievementsList = () => {\n  const { t } = useTranslation()\n  const achievements = useAchievements()\n\n  return (\n    <>\n      <Grid>\n        {achievements.map((achievement) => (\n          <AchievementCard key={achievement.id} achievement={achievement} />\n        ))}\n      </Grid>\n      {achievements.length === 0 && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" style={{ height: '64px' }}>\n          <Heading as=\"h5\" scale=\"md\" color=\"textDisabled\">\n            {t('No achievements yet!')}\n          </Heading>\n        </Flex>\n      )}\n    </>\n  )\n}\n\nexport default AchievementsList\n","import styled from 'styled-components'\n\nconst ActionColumn = styled.div`\n  flex: none;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 160px;\n\n    & > button {\n      width: 100%;\n    }\n  }\n`\n\nexport default ActionColumn\n","import React from 'react'\nimport { Flex, FlexProps, PrizeIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface PointsLabelProps extends FlexProps {\n  points: number\n}\n\nconst PointsLabel: React.FC<PointsLabelProps> = ({ points, ...props }) => {\n  const { t } = useTranslation()\n  const localePoints = points.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" {...props}>\n      <PrizeIcon mr=\"4px\" color=\"textSubtle\" />\n      <Text color=\"textSubtle\">{t('%num% points', { num: localePoints })}</Text>\n    </Flex>\n  )\n}\n\nexport default PointsLabel\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport ActionColumn from '../ActionColumn'\nimport PointsLabel from './PointsLabel'\nimport AchievementTitle from '../AchievementTitle'\nimport AchievementAvatar from '../AchievementAvatar'\nimport AchievementDescription from '../AchievementDescription'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const [isCollecting, setIsCollecting] = useState(false)\n  const { t } = useTranslation()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleCollectPoints = () => {\n    pointCenterContract.methods\n      .getPoints(achievement.address)\n      .send({ from: account })\n      .on('sending', () => {\n        setIsCollecting(true)\n      })\n      .on('receipt', () => {\n        setIsCollecting(false)\n        onCollectSuccess(achievement)\n        toastSuccess(t('Points Collected!'))\n      })\n      .on('error', (error) => {\n        toastError(t('Error'), error?.message)\n        setIsCollecting(false)\n      })\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {t('Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n","import React, { useEffect, useState } from 'react'\nimport { sumBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/hooks'\nimport { Achievement } from 'state/types'\nimport { addPoints } from 'state/profile'\nimport { addAchievement } from 'state/achievements'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimableIfoData } from 'utils/achievements'\nimport AchievementRow from './AchievementRow'\n\nconst ClaimPointsCallout = () => {\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account)\n      setClaimableAchievement(ifoData)\n    }\n\n    if (account) {\n      fetchIfoClaims()\n    }\n  }, [account, dispatch, setClaimableAchievement])\n\n  const handleCollectSuccess = (achievement: Achievement) => {\n    dispatch(addAchievement(achievement))\n    dispatch(addPoints(achievement.points))\n\n    setClaimableAchievement((prevClaimableAchievements) =>\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\n    )\n  }\n\n  if (!profile?.isActive) {\n    return null\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\n\n  return (\n    <Card isActive mb=\"32px\">\n      <CardHeader>\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\n          </Flex>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {claimableAchievements.map((achievement) => (\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\n        ))}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ClaimPointsCallout\n","import { useTranslation } from 'contexts/Localization'\nimport React from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { ChevronLeftIcon, Flex, Text, ButtonMenu, ButtonMenuItem } from '@pancakeswap/uikit'\n\ninterface MenuProps {\n  activeIndex?: number\n}\n\nconst Menu: React.FC<MenuProps> = ({ activeIndex = 0 }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Flex mb=\"24px\">\n        <RouterLink to=\"/teams\">\n          <Flex alignItems=\"center\">\n            <ChevronLeftIcon color=\"primary\" />\n            <Text color=\"primary\">{t('Teams Overview')}</Text>\n          </Flex>\n        </RouterLink>\n      </Flex>\n\n      <Flex mb=\"24px\" justifyContent=\"center\">\n        <ButtonMenu activeIndex={activeIndex} variant=\"subtle\" scale=\"sm\">\n          <ButtonMenuItem as={RouterLink} to=\"/profile/tasks\">\n            {t('Task Center')}\n          </ButtonMenuItem>\n          <ButtonMenuItem as={RouterLink} to=\"/profile\">\n            {t('Public Profile')}\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </Flex>\n    </>\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport { Card, CardBody, CardHeader, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport AchievementsList from './components/AchievementsList'\nimport ClaimPointsCallout from './components/ClaimPointsCallout '\nimport ComingSoon from './components/ComingSoon'\nimport Menu from './components/Menu'\n\nconst TaskCenter = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Menu />\n      <ClaimPointsCallout />\n      <Card mb=\"32px\">\n        <CardHeader>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <div>\n              <Heading scale=\"lg\" mb=\"8px\">\n                {t('Achievements')}\n              </Heading>\n              <Text as=\"p\">{t('Earn more points for completing larger quests!')}</Text>\n            </div>\n          </Flex>\n        </CardHeader>\n        <CardBody>\n          <AchievementsList />\n        </CardBody>\n      </Card>\n      <Card mb=\"32px\">\n        <CardHeader>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\">\n            <div>\n              <Heading scale=\"lg\" mb=\"8px\">\n                {t('Task Center')}\n              </Heading>\n              <Text as=\"p\">{t('Earn points by completing regular tasks!')}</Text>\n              <Text as=\"p\">{t('Collecting points for these tasks makes them available again.')}</Text>\n            </div>\n          </Flex>\n        </CardHeader>\n        <CardBody>\n          <ComingSoon />\n        </CardBody>\n      </Card>\n    </>\n  )\n}\n\nexport default TaskCenter\n","import styled, { DefaultTheme } from 'styled-components'\nimport { CardHeader as UIKitCardHeader } from '@pancakeswap/uikit'\n\nconst getBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n\nconst CardHeader = styled(UIKitCardHeader)`\n  background: ${({ theme }) => getBackground(theme)};\n  position: relative;\n`\n\nexport default CardHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@pancakeswap/uikit'\nimport { Nft } from 'config/constants/types'\n\ninterface CollectibleCardProps {\n  nft: Nft\n}\n\nconst PreviewImage = styled.img`\n  border-radius: 4px;\n  margin-bottom: 8px;\n`\n\nconst CollectibleCard: React.FC<CollectibleCardProps> = ({ nft }) => {\n  return (\n    <div>\n      <PreviewImage src={`/images/nfts/${nft.images.lg}`} />\n      <Text bold mb=\"8px\">\n        {nft.name}\n      </Text>\n      <Text as=\"p\" fontSize=\"12px\" color=\"textSubtle\">\n        {nft.description}\n      </Text>\n    </div>\n  )\n}\n\nexport default CollectibleCard\n","import React from 'react'\nimport { Heading, Text, Flex, ChevronRightIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetCollectibles } from 'state/hooks'\nimport styled from 'styled-components'\nimport CollectibleCard from './CollectibleCard'\n\nconst CollectibleList = styled.div`\n  display: grid;\n  grid-gap: 16px;\n  grid-template-columns: repeat(2, 1fr);\n  padding: 16px 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-gap: 24px;\n    grid-template-columns: repeat(3, 1fr);\n    padding: 24px 0;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(4, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    grid-template-columns: repeat(5, 1fr);\n  }\n`\n\nconst Collectibles = () => {\n  const { t } = useTranslation()\n  const { nftsInWallet } = useGetCollectibles()\n\n  return (\n    <>\n      <Heading as=\"h4\" scale=\"md\" mb=\"8px\">\n        {t('Pancake Collectibles')}\n      </Heading>\n      <Text as=\"p\">\n        {t('Pancake Collectibles are special ERC-721 NFTs that can be used on the PancakeSwap platform.')}\n      </Text>\n      <Text as=\"p\">\n        {t('NFTs in this user’s wallet that aren’t approved Pancake Collectibles won’t be shown here.')}\n      </Text>\n      {nftsInWallet.length > 0 && (\n        <CollectibleList>\n          {nftsInWallet.map((nftInWallet) => (\n            <CollectibleCard key={nftInWallet.identifier} nft={nftInWallet} />\n          ))}\n        </CollectibleList>\n      )}\n      {nftsInWallet.length === 0 && (\n        <Flex justifyContent=\"center\" p=\"32px\">\n          <Text fontSize=\"20px\" bold color=\"textDisabled\">\n            {t('No NFTs Found')}\n          </Text>\n        </Flex>\n      )}\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n        <Link to=\"/collectibles\">{t('See all approved Pancake Collectibles')}</Link>\n        <ChevronRightIcon />\n      </Flex>\n    </>\n  )\n}\n\nexport default Collectibles\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useModal } from '@pancakeswap/uikit'\nimport EditProfileModal from './EditProfileModal'\nimport ProfileAvatar, { ProfileAvatarProps } from './ProfileAvatar'\n\nconst EditOverlay = styled.div`\n  background: rgba(0, 0, 0, 0.6) url('/images/camera.svg') no-repeat center center;\n  background-size: 24px;\n  border-radius: 50%;\n  left: 0;\n  height: 100%;\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  transition: opacity 300ms;\n  width: 100%;\n  z-index: 3;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    background-size: 48px;\n  }\n`\n\nconst StyledEditProfileAvatar = styled.div`\n  position: relative;\n\n  &:hover {\n    cursor: pointer;\n\n    ${EditOverlay} {\n      opacity: 1;\n    }\n  }\n`\n\nconst AvatarWrapper = styled.div`\n  height: 64px;\n  width: 64px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 128px;\n    width: 128px;\n  }\n`\n\nconst EditProfileAvatar: React.FC<ProfileAvatarProps> = ({ profile }) => {\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  return (\n    <StyledEditProfileAvatar onClick={onEditProfileModal}>\n      <AvatarWrapper>\n        <ProfileAvatar profile={profile} />\n      </AvatarWrapper>\n      <EditOverlay />\n    </StyledEditProfileAvatar>\n  )\n}\n\nexport default EditProfileAvatar\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Card,\n  CardBody,\n  CheckmarkCircleIcon,\n  Flex,\n  Heading,\n  Link,\n  Tag,\n  Text,\n  PrizeIcon,\n  OpenNewIcon,\n  BlockIcon,\n  VisibilityOn,\n  VisibilityOff,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useProfile } from 'state/hooks'\nimport usePersistState from 'hooks/usePersistState'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport Menu from './components/Menu'\nimport CardHeader from './components/CardHeader'\nimport Collectibles from './components/Collectibles'\nimport WalletNotConnected from './components/WalletNotConnected'\nimport StatBox from './components/StatBox'\nimport EditProfileAvatar from './components/EditProfileAvatar'\nimport AchievementsList from './components/AchievementsList'\n\nconst Content = styled.div`\n  flex: 1;\n  padding: 16px 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 16px;\n  }\n`\n\nconst Username = styled(Heading)`\n  font-size: 16px;\n  line-height: 24px;\n  margin-bottom: 8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 40px;\n    line-height: 44px;\n  }\n`\n\nconst Status = styled.div`\n  position: absolute;\n  right: 24px;\n  top: 24px;\n`\n\nconst ResponsiveText = styled(Text)`\n  font-size: 12px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 16px;\n  }\n`\n\nconst AddressLink = styled(Link)`\n  display: inline-block;\n  font-weight: 400;\n  font-size: 12px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 80px;\n  white-space: nowrap;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 16px;\n    width: auto;\n  }\n`\n\nconst Section = styled.div`\n  margin-bottom: 40px;\n`\n\nconst PublicProfile = () => {\n  const { account } = useWeb3React()\n  const { profile } = useProfile()\n  const [usernameVisibilityToggled, setUsernameVisibility] = usePersistState(false, {\n    localStorageKey: 'username_visibility_toggled',\n  })\n  const { t } = useTranslation()\n\n  if (!account) {\n    return <WalletNotConnected />\n  }\n\n  const toggleUsernameVisibility = () => {\n    setUsernameVisibility(!usernameVisibilityToggled)\n  }\n\n  const { username, team, isActive, points } = profile\n\n  const Icon = usernameVisibilityToggled ? VisibilityOff : VisibilityOn\n\n  return (\n    <>\n      <Menu activeIndex={1} />\n      <div>\n        <Card>\n          <CardHeader>\n            <Flex alignItems={['start', null, 'center']} flexDirection={['column', null, 'row']}>\n              <EditProfileAvatar profile={profile} />\n              <Content>\n                <Flex alignItems=\"center\">\n                  <Username>@{usernameVisibilityToggled ? username : username.replace(/./g, '*')}</Username>\n                  <Icon ml=\"4px\" onClick={toggleUsernameVisibility} cursor=\"pointer\" />\n                </Flex>\n                <Flex alignItems=\"center\">\n                  <AddressLink href={getBscScanAddressUrl(account)} color=\"text\" external>\n                    {account}\n                    <OpenNewIcon ml=\"4px\" />\n                  </AddressLink>\n                </Flex>\n                <ResponsiveText bold>{team.name}</ResponsiveText>\n              </Content>\n            </Flex>\n            <Status>\n              {isActive ? (\n                <Tag startIcon={<CheckmarkCircleIcon width=\"18px\" />} outline>\n                  {t('Active')}\n                </Tag>\n              ) : (\n                <Tag variant=\"failure\" startIcon={<BlockIcon width=\"18px\" />} outline>\n                  {t('Paused')}\n                </Tag>\n              )}\n            </Status>\n          </CardHeader>\n          <CardBody>\n            <StatBox icon={PrizeIcon} title={points} subtitle={t('Points')} mb=\"24px\" />\n            <Section>\n              <Heading as=\"h4\" scale=\"md\" mb=\"16px\">\n                {t('Achievements')}\n              </Heading>\n              <AchievementsList />\n            </Section>\n            <Collectibles />\n          </CardBody>\n        </Card>\n      </div>\n    </>\n  )\n}\n\nexport default PublicProfile\n","import React from 'react'\nimport { Route } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport Page from 'components/layout/Page'\nimport PageLoader from 'components/PageLoader'\nimport { useFetchAchievements, useProfile } from 'state/hooks'\nimport ProfileCreation from './ProfileCreation'\nimport Header from './components/Header'\nimport TaskCenter from './TaskCenter'\nimport PublicProfile from './PublicProfile'\n\nconst Profile = () => {\n  const { isInitialized, isLoading, hasProfile } = useProfile()\n  const { account } = useWeb3React()\n\n  useFetchAchievements()\n\n  if (!isInitialized || isLoading) {\n    return <PageLoader />\n  }\n\n  if (account && !hasProfile) {\n    return (\n      <Page>\n        <ProfileCreation />\n      </Page>\n    )\n  }\n\n  return (\n    <Page>\n      <Header />\n      <Route exact path=\"/profile\">\n        <PublicProfile />\n      </Route>\n      <Route path=\"/profile/tasks\">\n        <TaskCenter />\n      </Route>\n    </Page>\n  )\n}\n\nexport default Profile\n"],"sourceRoot":""}