{"version":3,"sources":["hooks/useTokenBalance.ts","views/Predictions/components/History/Header.tsx","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollRoundData.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/Card.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/BlockProgress.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","hooks/useGetBlockCountdown.ts","views/Predictions/hooks/useRoundCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/Positions.tsx","views/Predictions/Mobile.tsx","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx"],"names":["FetchStatus","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getCakeContract","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","BIG_ZERO","balance","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useGetBnbBalance","account","useWeb3React","useLastUpdated","lastUpdated","setLastUpdated","eth","getBalance","walletBalance","refresh","useTokenBalance","NOT_FETCHED","SUCCESS","FAILED","fetchStatus","balanceState","setBalanceState","fastRefresh","console","error","prev","HistoryTabs","useGetLatestOraclePrice","price","setPrice","chainlinkOracleContract","useChainlinkOracleContract","latestAnswer","response","getBalanceAmount","fetchPrice","usePollOraclePrice","seconds","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollRoundData","getMarketData","marketData","updateMarketData","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","useRef","predictionStatus","useGetPredictionsStatus","isHistoryPaneOpen","useIsHistoryPaneOpen","isCancelled","current","getBetHistory","user","toLowerCase","claimed","bets","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","getBnbAmount","bnbBn","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","getTimePeriods","hours","minutes","minutesSeconds","getMultiplier","total","amount","getPayout","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getBubbleGumBackground","Modal","ModalContainer","CollectRoundWinningsModal","payout","roundId","epoch","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","fontSize","times","toNumber","claim","send","from","once","result","markBetAsCollected","transactionHash","href","getBscScanTransactionUrl","message","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","Row","PrizePoolRow","bold","getPrizePoolAmount","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","lockPrice","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","RoundResult","closePrice","isPositionUp","priceDifference","failed","useIsRefundable","isRefundable","setIsRefundable","claimable","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","BetResult","canClaim","useBetCanClaim","Result","WIN","getHeaderColor","LOSE","CANCELED","handleSuccess","fetchBet","getHeaderText","getHeaderIcon","claimedHash","getResultColor","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","getBscScanBlockNumberUrl","lockBlock","external","endBlock","StyledBet","attrs","YourResult","HistoricalBet","currentEpoch","useGetCurrentEpoch","status","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","PredictionStatus","role","scale","Filter","label","StyledHeader","ButtonMenuContainer","getClaimParam","historyFilter","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","useGetHistoryFilter","isFetchingHistory","useGetIsFetchingHistory","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","orderBy","map","key","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","toFixed","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","rounds","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","Divider","backgroundDisabled","initialPnlSummary","bestRound","getPnlSummary","reduce","rawPayout","getNetPayout","PnlTab","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","getBscScanAddressUrl","StyledHistory","BetWrapper","SpinnerWrapper","History","useGetHistoryByAccount","results","getUnclaimedWinningBets","activeTabComponent","PNL","UnlockButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","values","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","StyledEnteredTag","EnteredTag","useTooltip","whiteSpace","placement","targetRef","tooltipVisible","tooltip","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","betAmount","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","Card","UIKitCard","getTextColorByStatus","StyledCardHeader","cardHeader","warning","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","CanceledRoundCard","useGetTotalIntervalBlocks","estimatedEndBlock","startBlock","blockNumber","my","StyledExpiredRoundCard","ExpiredRoundCard","hasEnteredUp","hasEnteredDown","useGetBetByRoundId","BlockProgress","rawProgress","useBlock","currentBlock","progress","primaryStep","CalculatingCard","GradientBorder","GradientCard","LiveRoundCard","totalInterval","useGetIntervalBlocks","useGetLastOraclePrice","isBull","gt","priceColor","minus","useCountUp","start","end","duration","decimals","countUp","update","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","gasPrice","BIG_TEN","pow","BIG_NINE","dust","DEFAULT_TOKEN_DECIMAL","percentShortcuts","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","bnbBalance","minBetAmount","useGetMinBetAmount","balanceDisplay","useMemo","maxBalance","minBetAmountBalance","valueAsBn","showFieldWarning","percent","setPercent","handlePercentChange","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","toFormat","lte","eq","isNaN","lt","getButtonProps","bnValue","data","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","percentage","Math","floor","min","isWarning","inputProps","name","max","onValueChanged","valueLabel","step","percentShortcut","betMethod","decimalValue","getDecimalAmount","errorMsg","OpenRoundCard","isSettingPosition","state","setState","isBufferPhase","positionDisplay","estimatedLockBlock","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","hash","markPositionAsEntered","useBlockCountdown","secondsRemaining","setSecondsRemaining","getWeb3NoAccount","getBlockNumber","BSC_BLOCK_TIME","prevSecondsRemaining","startCountdown","useRoundCountdown","intervalsToAdd","currentRoundBlockNum","useGetCurrentRoundBlockNumber","blocksToAdd","SoonRoundCard","countdown","RoundCard","Token","lg","Title","Text","Price","Interval","Label","dir","PricePairLabel","display","TimerLabel","unit","pr","StyledPrevNextNav","Icon","PrevNextNav","useGetSortedRounds","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","fetchCurrentBets","roundIds","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","initialIndex","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","useIsChartPaneOpen","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","view","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","bubblegum","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","ChartDisclaimer","Predictions","isXl","useMatchBreakpoints","usePersistState","localStorageKey","hasAcceptedRisk","setHasAcceptedRisk","hasAcceptedChart","setHasAcceptedChart","initialBlock","useInitialBlock","isDesktop","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","all","getStaticPredictionsData","staticPredictionsData","intervalBlocks","bufferBlocks","latestRound","find","market","paused","setPredictionStatus","currentRoundStartBlock","Number","futureRounds","halfInterval","i","push","makeFutureRoundResponse","roundData","makeRoundData","transformRoundResponse","initialize","currentRoundStartBlockNumber","history","fetchInitialData","INITIAL","PageLoader"],"mappings":"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","file":"static/js/15.7a18aa58.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const web3 = useWeb3()\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      try {\n        const res = await contract.methods.balanceOf(account).call()\n        setBalanceState({ balance: new BigNumber(res), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowForwardIcon,\n  Box,\n  Button,\n  Radio,\n  Flex,\n  Heading,\n  Text,\n  ButtonMenu,\n  ButtonMenuItem,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { HistoryFilter } from 'state/types'\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { getBubbleGumBackground } from '../../helpers'\n\nconst Filter = styled.label`\n  align-items: center;\n  cursor: pointer;\n  display: inline-flex;\n  margin-right: 16px;\n`\n\nconst StyledHeader = styled(Box)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n  flex: none;\n  padding: 16px;\n`\n\nconst ButtonMenuContainer = styled.div`\n  width: 100%;\n  & > div {\n    width: 100%;\n  }\n\n  & button {\n    width: 100%;\n  }\n`\n\nconst getClaimParam = (historyFilter: HistoryFilter) => {\n  switch (historyFilter) {\n    case HistoryFilter.COLLECTED:\n      return true\n    case HistoryFilter.UNCOLLECTED:\n      return false\n    case HistoryFilter.ALL:\n    default:\n      return undefined\n  }\n}\n\ninterface HeaderProps {\n  activeTab: HistoryTabs\n  setActiveTab: (value: HistoryTabs) => void\n}\n\nexport enum HistoryTabs {\n  ROUNDS,\n  PNL,\n}\n\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\n  const historyFilter = useGetHistoryFilter()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(false))\n  }\n\n  const handleChange = (newFilter: HistoryFilter) => async () => {\n    if (newFilter !== historyFilter) {\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\n      dispatch(setHistoryFilter(newFilter))\n    }\n  }\n\n  const switchTab = async (tabIndex: number) => {\n    setActiveTab(tabIndex)\n    await handleChange(HistoryFilter.ALL)()\n  }\n\n  return (\n    <StyledHeader>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n        <Heading as=\"h3\" size=\"md\">\n          {t('History')}\n        </Heading>\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\n          {t('Close')}\n        </Button>\n      </Flex>\n      <ButtonMenuContainer>\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\n        </ButtonMenu>\n      </ButtonMenuContainer>\n      {activeTab === HistoryTabs.ROUNDS && (\n        <>\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n            {t('Filter')}\n          </Text>\n          <Flex alignItems=\"center\">\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.ALL}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.ALL)}\n              />\n              <Text ml=\"4px\">{t('All')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.COLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.COLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Collected')}</Text>\n            </Filter>\n            <Filter>\n              <Radio\n                scale=\"sm\"\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\n                disabled={isFetchingHistory || !account}\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\n              />\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\n            </Filter>\n          </Flex>\n        </>\n      )}\n    </StyledHeader>\n  )\n}\n\nexport default Header\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useChainlinkOracleContract } from 'hooks/useContract'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nconst useGetLatestOraclePrice = () => {\n  const [price, setPrice] = useState(BIG_ZERO)\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\n  const chainlinkOracleContract = useChainlinkOracleContract()\n\n  useEffect(() => {\n    const fetchPrice = async () => {\n      const response = await chainlinkOracleContract.methods.latestAnswer().call()\n      setPrice(getBalanceAmount(new BigNumber(response), 8))\n    }\n\n    fetchPrice()\n  }, [chainlinkOracleContract, lastUpdated, setPrice])\n\n  return { price, lastUpdated, refresh }\n}\n\nexport default useGetLatestOraclePrice\n","import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 30) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { updateMarketData } from 'state/predictions'\nimport { getMarketData } from 'state/predictions/helpers'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollRoundData = () => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const timer = setInterval(async () => {\n      const marketData = await getMarketData()\n\n      dispatch(updateMarketData(marketData))\n    }, POLL_TIME_IN_SECONDS * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [account, dispatch])\n}\n\nexport default usePollRoundData\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\n  height: calc(100vh - 64px);\n  min-height: calc(100vh - 64px);\n  overflow: hidden;\n  position: relative;\n`\n\nexport default Container\n","import React, { useEffect, useRef, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled, { css, keyframes } from 'styled-components'\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { CSSTransition } from 'react-transition-group'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory } from 'state/predictions/helpers'\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/hooks'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\n\n/**\n * @see https://github.com/animate-css/animate.css/tree/main/source\n */\nconst bounceInKeyframe = keyframes`\n  from,\n  60%,\n  75%,\n  90%,\n  to {\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\n  }\n\n  from {\n    opacity: 0;\n    transform: translate3d(0, 3000px, 0) scaleY(5);\n  }\n\n  60% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  75% {\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\n  }\n\n  90% {\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\n  }\n\n  to {\n    transform: translate3d(0, 0, 0);\n  }\n`\n\nconst bounceOutKeyframe = keyframes`\n  20% {\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\n  }\n\n  40%,\n  45% {\n    opacity: 1;\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\n  }\n\n  to {\n    opacity: 0;\n    transform: translate3d(0, 2000px, 0) scaleY(3);\n  }\n`\n\nconst bounceInAnimation = css`\n  animation: ${bounceInKeyframe} 1s;\n`\n\nconst bounceOutAnimation = css`\n  animation: ${bounceOutKeyframe} 1s;\n`\n\nconst Wrapper = styled.div`\n  align-items: center;\n  bottom: 72px;\n  color: #ffffff;\n  display: flex;\n  justify-content: center;\n  left: 0;\n  padding-left: 16px;\n  padding-right: 16px;\n  position: absolute;\n  width: 100%;\n  z-index: 50;\n\n  &.popup-enter-active {\n    ${bounceInAnimation}\n  }\n\n  &.popup-enter-done {\n    bottom: 72px;\n  }\n\n  &.popup-exit-done {\n    bottom: -2000px;\n  }\n\n  &.popup-exit-active {\n    ${bounceOutAnimation}\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    bottom: 16px;\n    justify-content: flex-end;\n\n    &.popup-enter-done {\n      bottom: 16px;\n    }\n  }\n`\n\nconst Popup = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.colors.secondary};\n  border-radius: 32px;\n  color: #ffffff;\n  display: flex;\n  max-width: 320px;\n  padding: 16px 8px;\n`\n\nconst CollectWinningsPopup = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { t } = useTranslation()\n  const ref = useRef(null)\n  const timer = useRef(null)\n  const { account } = useWeb3React()\n  const predictionStatus = useGetPredictionsStatus()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  const handleClick = () => {\n    setIsOpen(false)\n    clearInterval(timer.current)\n  }\n\n  // Check user's history for unclaimed winners\n  useEffect(() => {\n    let isCancelled = false\n    if (account) {\n      timer.current = setInterval(async () => {\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\n\n        if (!isCancelled) {\n          // Filter out bets that were not winners\n          const winnerBets = bets.filter((bet) => {\n            return bet.position === bet.round.position\n          })\n\n          if (!isHistoryPaneOpen) {\n            setIsOpen(winnerBets.length > 0)\n          }\n        }\n      }, 30000)\n    }\n\n    return () => {\n      clearInterval(timer.current)\n      isCancelled = true\n    }\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\n\n  // Any time the history pane is open make sure the popup closes\n  useEffect(() => {\n    if (isHistoryPaneOpen) {\n      setIsOpen(false)\n    }\n  }, [isHistoryPaneOpen, setIsOpen])\n\n  return (\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\n      <Wrapper ref={ref}>\n        <Popup>\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\n            {t('Collect Winnings')}\n          </Button>\n          <IconButton variant=\"text\" onClick={handleClick}>\n            <CloseIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n        </Popup>\n      </Wrapper>\n    </CSSTransition>\n  )\n}\n\nexport default CollectWinningsPopup\n","import React, { createContext, Dispatch, useState } from 'react'\nimport SwiperCore from 'swiper'\n\ninterface Context {\n  swiper: SwiperCore\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\n  destroySwiper: () => void\n}\n\nexport const SwiperContext = createContext<Context>(undefined)\n\nconst SwiperProvider = ({ children }) => {\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\n\n  const destroySwiper = () => {\n    if (swiper) {\n      swiper.destroy()\n      setSwiper(null)\n    }\n  }\n\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\n}\n\nexport default SwiperProvider\n","import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: 'tradingview_b239c',\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.TradingView) {\n      // @ts-ignore\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id=\"tradingview_b239c\" />\n    </Box>\n  )\n}\n\nexport default TradingView\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\n\ninterface NotificationProps {\n  title: string\n}\n\n// const BunnyDecoration = styled.div`\n//   position: absolute;\n//   top: -130px; // line up bunny at the top of the modal\n//   left: 0px;\n//   text-align: center;\n//   width: 100%;\n// `\n\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  height: 100%;\n  justify-content: center;\n`\n\nconst CardWrapper = styled.div`\n  position: relative;\n  width: 320px;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -130px;\n  left: 0px;\n  text-align: center;\n  width: 100%;\n  z-index: 5;\n`\n\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\n  return (\n    <Wrapper>\n      <CardWrapper>\n        <BunnyDecoration>\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\n        </BunnyDecoration>\n        <Card>\n          <CardBody>\n            <Heading mb=\"24px\">{title}</Heading>\n            {children}\n          </CardBody>\n        </Card>\n      </CardWrapper>\n    </Wrapper>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst ErrorNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n  return (\n    <Notification title={t('Error')}>\n      <Text as=\"p\" mb=\"24px\">\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\n      </Text>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default ErrorNotification\n","import React from 'react'\nimport { Box, Button, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport Notification from './Notification'\n\nconst PauseNotification = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n\n  const handleOpenHistory = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <Notification title={t('Markets Paused')}>\n      <Box mb=\"24px\">\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\n        <Text as=\"p\">\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\n        </Text>\n      </Box>\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\n        {t('Show History')}\n      </Button>\n    </Notification>\n  )\n}\n\nexport default PauseNotification\n","import BigNumber from 'bignumber.js'\nimport { Bet, BetPosition } from 'state/types'\nimport { DefaultTheme } from 'styled-components'\nimport { formatNumber, getBalanceAmount } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nexport const getBnbAmount = (bnbBn: BigNumber) => {\n  return getBalanceAmount(bnbBn, 18)\n}\n\nexport const formatUsd = (usd: number) => {\n  return `$${formatNumber(usd || 0, 3, 3)}`\n}\n\nexport const formatBnb = (bnb: number) => {\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\n}\n\nexport const formatBnbFromBigNumber = (bnbBn: BigNumber) => {\n  return formatBnb(getBnbAmount(bnbBn).toNumber())\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getMultiplier = (total: number, amount: number) => {\n  if (total === 0 || amount === 0) {\n    return 0\n  }\n\n  return total / amount\n}\n\n/**\n * Calculates the total payout given a bet\n */\nexport const getPayout = (bet: Bet) => {\n  if (!bet || !bet.round) {\n    return 0\n  }\n\n  const { bullAmount, bearAmount, totalAmount } = bet.round\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n  return bet.amount * multiplier\n}\n\n// TODO: Move this to the UI Kit\nexport const getBubbleGumBackground = (theme: DefaultTheme) => {\n  if (theme.isDark) {\n    return 'linear-gradient(139.73deg, #142339 0%, #24243D 47.4%, #37273F 100%)'\n  }\n\n  return 'linear-gradient(139.73deg, #E6FDFF 0%, #EFF4F5 46.87%, #F3EFFF 100%)'\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  LinkExternal,\n  ModalCloseButton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\nimport { useAppDispatch } from 'state'\nimport { usePriceBnbBusd } from 'state/hooks'\nimport { markBetAsCollected } from 'state/predictions'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { formatBnb } from '../helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  payout: number\n  roundId: string\n  epoch: number\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\n  payout,\n  roundId,\n  epoch,\n  onDismiss,\n  onSuccess,\n}) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = usePriceBnbBusd()\n  const dispatch = useAppDispatch()\n\n  const handleClick = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async (result) => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n\n        dispatch(markBetAsCollected({ account, roundId }))\n        onDismiss()\n        setIsPendingTx(false)\n        toastSuccess(\n          t('Winnings collected!'),\n          <Box>\n            <Text as=\"p\" mb=\"8px\">\n              {t('Your prizes have been sent to your wallet')}\n            </Text>\n            {result.transactionHash && (\n              <LinkExternal href={getBscScanTransactionUrl(result.transactionHash)}>\n                {t('View on BscScan')}\n              </LinkExternal>\n            )}\n          </Box>,\n        )\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n","import React from 'react'\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\n\ninterface CollectWinningsButtonProps extends ButtonProps {\n  payout: number\n  roundId: string\n  epoch: number\n  hasClaimed: boolean\n  onSuccess?: () => Promise<void>\n}\n\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\n  payout,\n  roundId,\n  epoch,\n  hasClaimed,\n  onSuccess,\n  children,\n  ...props\n}) => {\n  const [onPresentCollectWinningsModal] = useModal(\n    <CollectRoundWinningsModal payout={payout} roundId={roundId} epoch={epoch} onSuccess={onSuccess} />,\n    false,\n  )\n\n  return (\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\n      {children}\n    </Button>\n  )\n}\n\nexport default CollectWinningsButton\n","import React, { ReactNode, useState } from 'react'\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\n\ninterface ReclaimPositionButtonProps extends ButtonProps {\n  epoch: number\n  onSuccess?: () => Promise<void>\n  children?: ReactNode\n}\n\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const predictionsContract = usePredictionsContract()\n  const { toastSuccess, toastError } = useToast()\n\n  const handleReclaim = () => {\n    predictionsContract.methods\n      .claim(epoch)\n      .send({ from: account })\n      .once('sending', () => {\n        setIsPendingTx(true)\n      })\n      .once('receipt', async () => {\n        if (onSuccess) {\n          await onSuccess()\n        }\n        setIsPendingTx(false)\n        toastSuccess(t('Position reclaimed!'))\n      })\n      .once('error', (error) => {\n        setIsPendingTx(false)\n        toastError(t('Error'), error?.message)\n        console.error(error)\n      })\n  }\n\n  return (\n    <Button\n      onClick={handleReclaim}\n      isLoading={isPendingTx}\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\n      {...props}\n    >\n      {children || t('Reclaim Position')}\n    </Button>\n  )\n}\n\nexport default ReclaimPositionButton\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { BetPosition } from 'state/types'\n\ninterface TagProps extends FlexProps {\n  bg?: string\n  startIcon?: ReactNode\n}\n\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\n  display: inline-flex;\n`\n\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\n\n  return (\n    <StyledTag\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      borderRadius=\"4px\"\n      bg={bg}\n      py=\"4px\"\n      px=\"8px\"\n      onClick={onClick}\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\n      {...props}\n    >\n      {icon}\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\n        {children}\n      </Text>\n    </StyledTag>\n  )\n}\n\ninterface PositionTagProps extends FlexProps {\n  betPosition: BetPosition\n}\n\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\n  const isUpPosition = betPosition === BetPosition.BULL\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\n\n  return (\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default PositionTag\n","import React from 'react'\nimport styled, { DefaultTheme } from 'styled-components'\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\nimport { formatBnb, formatUsd } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition, Round } from 'state/types'\n\n// PrizePoolRow\ninterface PrizePoolRowProps extends FlexProps {\n  totalAmount: Round['totalAmount']\n}\n\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\n  if (!totalAmount) {\n    return '0'\n  }\n\n  return formatBnb(totalAmount)\n}\n\nconst Row = ({ children, ...props }) => {\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\n      {children}\n    </Flex>\n  )\n}\n\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text bold>{t('Prize Pool')}:</Text>\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\n    </Row>\n  )\n}\n\n// Payout Row\ninterface PayoutRowProps extends FlexProps {\n  positionLabel: string\n  multiplier: number\n  amount: number\n}\n\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\n  const { t } = useTranslation()\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\n\n  return (\n    <Row height=\"18px\" {...props}>\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\n        {positionLabel}:\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\n        </Text>\n        <Text mx=\"4px\">|</Text>\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\n      </Flex>\n    </Row>\n  )\n}\n\n// LockPriceRow\ninterface LockPriceRowProps extends FlexProps {\n  lockPrice: Round['lockPrice']\n}\n\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Row {...props}>\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\n    </Row>\n  )\n}\n\n// RoundResultBox\ninterface RoundResultBoxProps {\n  betPosition?: BetPosition\n  isNext?: boolean\n  isLive?: boolean\n  hasEntered?: boolean\n}\n\nconst getBackgroundColor = ({\n  theme,\n  betPosition,\n  isNext,\n  isLive,\n  hasEntered,\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\n  if (isNext) {\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\n  }\n\n  if (hasEntered || isLive) {\n    return theme.colors.secondary\n  }\n\n  if (betPosition === BetPosition.BULL) {\n    return theme.colors.success\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return theme.colors.failure\n  }\n\n  return theme.colors.cardBorder\n}\n\nconst Background = styled(Box)<RoundResultBoxProps>`\n  background: ${getBackgroundColor};\n  border-radius: 16px;\n  padding: 2px;\n`\n\nconst StyledRoundResultBox = styled.div`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 14px;\n  padding: 16px;\n`\n\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\n  isNext = false,\n  hasEntered = false,\n  isLive = false,\n  children,\n  ...props\n}) => {\n  return (\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\n    </Background>\n  )\n}\n","import React from 'react'\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\nimport { BetPosition, Round } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatUsd } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\n\ninterface RoundResultProps extends BoxProps {\n  round: Round\n}\n\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\n  const { lockPrice, closePrice, totalAmount } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const isPositionUp = betPosition === BetPosition.BULL\n  const { t } = useTranslation()\n  const priceDifference = closePrice - lockPrice\n\n  return (\n    <RoundResultBox betPosition={betPosition} {...props}>\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n        {t('Closed Price')}\n      </Text>\n      {round.failed ? (\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\n          {t('Canceled')}\n        </Text>\n      ) : (\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\n            {formatUsd(closePrice)}\n          </Text>\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\n        </Flex>\n      )}\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n      <PrizePoolRow totalAmount={totalAmount} />\n      {children}\n    </RoundResultBox>\n  )\n}\n\nexport default RoundResult\n","import { useEffect, useState } from 'react'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\n\nconst useIsRefundable = (epoch: number) => {\n  const [isRefundable, setIsRefundable] = useState(false)\n  const predictionsContract = usePredictionsContract()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchRefundableStatus = async () => {\n      const canClaim = await predictionsContract.methods.claimable(epoch, account).call()\n\n      if (canClaim) {\n        const refundable = await predictionsContract.methods.refundable(epoch, account).call()\n        setIsRefundable(refundable)\n      } else {\n        setIsRefundable(false)\n      }\n    }\n\n    if (account) {\n      fetchRefundableStatus()\n    }\n  }, [account, epoch, predictionsContract, setIsRefundable])\n\n  return { isRefundable, setIsRefundable }\n}\n\nexport default useIsRefundable\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBetCanClaim, usePriceBnbBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { Bet, BetPosition } from 'state/types'\nimport { fetchBet } from 'state/predictions'\nimport { Result } from 'state/predictions/helpers'\nimport { getBscScanTransactionUrl } from 'utils/bscscan'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport PositionTag from '../PositionTag'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\n\ninterface BetResultProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetResult = styled(Box)`\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\n  border-radius: 16px;\n  margin-bottom: 24px;\n  padding: 16px;\n`\n\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\n  const bnbBusdPrice = usePriceBnbBusd()\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = result === Result.WIN ? getPayout(bet) : bet.amount\n\n  const getHeaderColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'warning'\n      case Result.LOSE:\n        return 'textSubtle'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getHeaderText = () => {\n    switch (result) {\n      case Result.WIN:\n        return t('Win')\n      case Result.LOSE:\n        return t('Lose')\n      case Result.CANCELED:\n        return t('Canceled')\n      default:\n        return ''\n    }\n  }\n\n  const getHeaderIcon = () => {\n    switch (result) {\n      case Result.WIN:\n        return <PrizeIcon color={getHeaderColor()} />\n      case Result.LOSE:\n      case Result.CANCELED:\n        return <BlockIcon color={getHeaderColor()} />\n      default:\n        return null\n    }\n  }\n\n  const getResultColor = () => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n      default:\n        return 'text'\n    }\n  }\n\n  const handleSuccess = async () => {\n    await dispatch(fetchBet({ account, id: bet.id }))\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Heading>{t('Your History')}</Heading>\n        <Flex alignItems=\"center\">\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\n            {getHeaderText()}\n          </Heading>\n          {getHeaderIcon()}\n        </Flex>\n      </Flex>\n      <StyledBetResult>\n        {result === Result.WIN && !canClaim && (\n          <CollectWinningsButton\n            payout={payout}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            hasClaimed={!canClaim}\n            width=\"100%\"\n            mb=\"16px\"\n            onSuccess={handleSuccess}\n          >\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\n          </CollectWinningsButton>\n        )}\n        {bet.claimed && (\n          <Flex justifyContent=\"center\">\n            <LinkExternal href={getBscScanTransactionUrl(bet.claimedHash)} mb=\"16px\">\n              {t('View on BscScan')}\n            </LinkExternal>\n          </Flex>\n        )}\n        {result === Result.CANCELED && isRefundable && (\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\n        )}\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your direction')}</Text>\n          <PositionTag betPosition={bet.position}>\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          <Text>{t('Your position')}</Text>\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\n          <Text bold>{t('Your Result')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text bold color={getResultColor()}>{`${result === Result.LOSE ? '-' : '+'}${formatBnb(payout)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\n            </Text>\n          </Box>\n        </Flex>\n      </StyledBetResult>\n    </>\n  )\n}\n\nexport default BetResult\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanBlockNumberUrl } from 'utils/bscscan'\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\nimport { Result } from 'state/predictions/helpers'\nimport { getMultiplier } from '../../helpers'\nimport { PayoutRow, RoundResult } from '../RoundResult'\nimport BetResult from './BetResult'\n\ninterface BetDetailsProps {\n  bet: Bet\n  result: Result\n}\n\nconst StyledBetDetails = styled.div`\n  background-color: ${({ theme }) => theme.colors.dropdown};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  padding: 24px;\n`\n\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\n  const { t } = useTranslation()\n  const { totalAmount, bullAmount, bearAmount } = bet.round\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  return (\n    <StyledBetDetails>\n      {result === Result.CANCELED && (\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\n          {t(\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\n          )}\n        </Text>\n      )}\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\n      <RoundResult round={bet.round} mb=\"24px\">\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\n      </RoundResult>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text>{t('Opening Block')}</Text>\n        <Link href={getBscScanBlockNumberUrl(bet.round.lockBlock)} external>\n          {bet.round.lockBlock}\n        </Link>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Text>{t('Closing Block')}</Text>\n        <Link href={getBscScanBlockNumberUrl(bet.round.endBlock)} external>\n          {bet.round.endBlock}\n        </Link>\n      </Flex>\n    </StyledBetDetails>\n  )\n}\n\nexport default BetDetails\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  PlayCircleOutlineIcon,\n  Text,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { useBetCanClaim, useGetCurrentEpoch, useGetPredictionsStatus } from 'state/hooks'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getPayout } from '../../helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n  const canClaim = useBetCanClaim(account, bet.round.id)\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getPayout(bet) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton\n            hasClaimed={!canClaim}\n            roundId={bet.round.id}\n            epoch={bet.round.epoch}\n            payout={payout}\n            scale=\"sm\"\n            mr=\"8px\"\n          >\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n","import React from 'react'\nimport { orderBy } from 'lodash'\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Bet } from 'state/types'\nimport HistoricalBet from './HistoricalBet'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n\n  return hasBetHistory ? (\n    <>\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.id} bet={bet} />\n      ))}\n    </>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default RoundsTab\n","// @ts-nocheck\n/**\n * There is ts-nocheck at the top of this file for the following reasons:\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\n * without also messing prettier.\n *\n * I'll leave TODO: comment here to check back later if there is update to types\n *\n */\nimport styled, { keyframes } from 'styled-components'\n\ninterface SliceProps {\n  length: number\n  offset?: number\n}\n\nexport const DrawAnimation = keyframes`\n  from {\n    stroke-dasharray: 0, 339.292\n  }\n  to {\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\n  }\n`\n\nexport const OffsetAnimation = keyframes`\n  from {\n    stroke-dashoffset: 0\n  }\n  to {\n    stroke-dashoffset: ${(props) => -props.offset};\n  }\n`\n\nexport const SVG = styled.svg`\n  width: 128px;\n  height: 128px;\n  transform: rotate(-90deg);\n`\n\nconst DefaultSlice = styled.circle<SliceProps>`\n  fill: none;\n  stroke-width: 16;\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\n`\n\nexport const LostSlice = styled(DefaultSlice)`\n  stroke: #ed4b9e;\n  animation: ${DrawAnimation} 1s ease;\n`\n\nexport const WonSlice = styled(DefaultSlice)`\n  stroke: #31d0aa;\n  stroke-dashoffset: ${(props) => -props.offset};\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\n`\n\nexport const Wrapper = styled.div`\n  position: relative;\n  width: 128px;\n  height: 128px;\n`\n\nexport const Info = styled.div`\n  width: 128px;\n  height: 128px;\n  border-radius: 50%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  z-index: 2;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\n\n/**\n * Bare minimum chart that doesn't require any external dependencies\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\n */\n\ninterface PnlChartProps {\n  won: number\n  lost: number\n}\n\n// 2 * Pi * R\nconst CIRCUMFERENCE = 339.292\n\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\n  const { t } = useTranslation()\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\n  const paintWon = CIRCUMFERENCE - paintLost\n  return (\n    <Wrapper>\n      <SVG viewBox=\"0 0 128 128\">\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\n      </SVG>\n      <Info>\n        <Text small lineHeight=\"1\">\n          {t('Won')}\n        </Text>\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\n          {won}/{won + lost}\n        </Text>\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\n          {percentageWon}%\n        </Text>\n      </Info>\n    </Wrapper>\n  )\n}\n\nexport default PnlChart\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { formatBnb } from 'views/Predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\n\ntype SummaryType = 'won' | 'lost' | 'entered'\n\ninterface SummaryRowProps {\n  type: SummaryType\n  summary: any\n  bnbBusdPrice: BigNumber\n}\n\nconst summaryTypeColors = {\n  won: 'success',\n  lost: 'failure',\n  entered: 'text',\n}\n\nconst summaryTypeSigns = {\n  won: '+',\n  lost: '-',\n  entered: '',\n}\n\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\n  const { t } = useTranslation()\n\n  const color = summaryTypeColors[type]\n  const { rounds, amount } = summary[type]\n  const totalRounds = summary.entered.rounds\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\n  const displayAmount = type === 'won' ? summary[type].payout : amount\n\n  return (\n    <>\n      <Text mt=\"16px\" bold color=\"textSubtle\">\n        {t(typeTranslationKey)}\n      </Text>\n      <Flex>\n        <Flex flex=\"2\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {rounds} {t('Rounds').toLocaleLowerCase()}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\n          </Text>\n        </Flex>\n        <Flex flex=\"3\" flexDirection=\"column\">\n          <Text bold fontSize=\"20px\" color={color}>\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\n          </Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n    </>\n  )\n}\n\nexport default SummaryRow\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanAddressUrl } from 'utils/bscscan'\nimport { useGetCurrentEpoch, usePriceBnbBusd } from 'state/hooks'\nimport { Bet, BetPosition } from 'state/types'\nimport { formatBnb, getMultiplier, getPayout } from 'views/Predictions/helpers'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport PnlChart from './PnlChart'\nimport SummaryRow from './SummaryRow'\n\ninterface PnlTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\ninterface PnlCategory {\n  rounds: number\n  amount: number\n}\n\ninterface PnlSummary {\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\n  lost: PnlCategory\n  entered: PnlCategory\n}\n\nconst TREASURY_FEE = 0.03\n\nconst getNetPayout = (bet: Bet) => {\n  const rawPayout = getPayout(bet)\n  const fee = rawPayout * TREASURY_FEE\n  return rawPayout - fee - bet.amount\n}\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\n  height: 1px;\n  margin: 24px auto;\n  width: 100%;\n`\n\nconst initialPnlSummary: PnlSummary = {\n  won: {\n    rounds: 0,\n    amount: 0,\n    payout: 0, // net payout after all deductions\n    bestRound: {\n      id: '0',\n      payout: 0, // net payout after all deductions\n      multiplier: 0,\n    },\n  },\n  lost: {\n    rounds: 0,\n    amount: 0,\n  },\n  entered: {\n    rounds: 0,\n    amount: 0,\n  },\n}\n\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\n  return bets.reduce((summary: PnlSummary, bet) => {\n    const roundResult = getRoundResult(bet, currentEpoch)\n    if (roundResult === Result.WIN) {\n      const payout = getNetPayout(bet)\n      let { bestRound } = summary.won\n      if (payout > bestRound.payout) {\n        const { bullAmount, bearAmount, totalAmount } = bet.round\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\n        bestRound = { id: bet.round.id, payout, multiplier }\n      }\n      return {\n        won: {\n          rounds: summary.won.rounds + 1,\n          amount: summary.won.amount + bet.amount,\n          payout: summary.won.payout + payout,\n          bestRound,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        lost: summary.lost,\n      }\n    }\n    if (roundResult === Result.LOSE) {\n      return {\n        lost: {\n          rounds: summary.lost.rounds + 1,\n          amount: summary.lost.amount + bet.amount,\n        },\n        entered: {\n          rounds: summary.entered.rounds + 1,\n          amount: summary.entered.amount + bet.amount,\n        },\n        won: summary.won,\n      }\n    }\n    // Ignore Canceled and Live rounds\n    return summary\n  }, initialPnlSummary)\n}\n\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const bnbBusdPrice = usePriceBnbBusd()\n\n  const summary = getPnlSummary(bets, currentEpoch)\n  const netResultAmount = summary.won.payout - summary.lost.amount\n  const netResultIsPositive = netResultAmount > 0\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\n\n  // Guard in case user has only lost rounds\n  const hasBestRound = summary.won.bestRound.payout !== 0\n\n  return hasBetHistory ? (\n    <Box p=\"16px\">\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\n        {t('Your history')}\n      </Text>\n      <Flex>\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\n          <Text bold color=\"textSubtle\">\n            {t('Net results')}\n          </Text>\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\n          </Text>\n        </Flex>\n      </Flex>\n      <Box pl=\"8px\">\n        <Text mt=\"24px\" bold color=\"textSubtle\">\n          {t('Average return / round')}\n        </Text>\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\n        </Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\n        </Text>\n\n        {hasBestRound && (\n          <>\n            <Text mt=\"16px\" bold color=\"textSubtle\">\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\n            </Text>\n            <Flex alignItems=\"flex-end\">\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\n              <Text ml=\"4px\" small color=\"textSubtle\">\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\n              </Text>\n            </Flex>\n            <Text small color=\"textSubtle\">\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\n            </Text>\n          </>\n        )}\n\n        <Text mt=\"16px\" bold color=\"textSubtle\">\n          {t('Average position entered / round')}\n        </Text>\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\n        <Text small color=\"textSubtle\">\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\n        </Text>\n\n        <Divider />\n\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\n\n        <Flex justifyContent=\"center\" mt=\"24px\">\n          <Link href={`${getBscScanAddressUrl(account)}#internaltx`} mb=\"16px\" external>\n            <Button mt=\"8px\" width=\"100%\">\n              {t('View Reclaimed & Won')}\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\n            </Button>\n          </Link>\n        </Flex>\n      </Box>\n    </Box>\n  ) : (\n    <Box p=\"24px\">\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n        {t('No prediction history available')}\n      </Heading>\n      <Text as=\"p\" textAlign=\"center\">\n        {t(\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n        )}\n      </Text>\n    </Box>\n  )\n}\n\nexport default PnlTab\n","import React, { useEffect, useState } from 'react'\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { fetchHistory } from 'state/predictions'\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\nimport { HistoryFilter } from 'state/types'\nimport { useAppDispatch } from 'state'\nimport {\n  useGetCurrentEpoch,\n  useGetHistoryByAccount,\n  useGetHistoryFilter,\n  useGetIsFetchingHistory,\n  useIsHistoryPaneOpen,\n} from 'state/hooks'\nimport { Header, HistoryTabs } from './components/History'\nimport RoundsTab from './components/History/RoundsTab'\nimport PnlTab from './components/History/PnlTab/PnlTab'\n\nconst StyledHistory = styled.div`\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nconst BetWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n  overflow-y: auto;\n  position: relative;\n`\n\nconst SpinnerWrapper = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst History = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const historyFilter = useGetHistoryFilter()\n  const currentEpoch = useGetCurrentEpoch()\n  const { t } = useTranslation()\n  const bets = useGetHistoryByAccount(account)\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\n\n  useEffect(() => {\n    if (account && isHistoryPaneOpen) {\n      dispatch(fetchHistory({ account }))\n    }\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\n\n  // Currently the api cannot filter by unclaimed AND won so we do it here\n  // when the user has selected Uncollected only include positions they won\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\n\n  const hasBetHistory = results && results.length > 0\n\n  let activeTabComponent = null\n\n  switch (activeTab) {\n    case HistoryTabs.PNL:\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n    case HistoryTabs.ROUNDS:\n    default:\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\n      break\n  }\n\n  if (!account) {\n    activeTabComponent = (\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\n        <UnlockButton />\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\n      </Flex>\n    )\n  }\n\n  return (\n    <StyledHistory>\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\n      <BetWrapper>\n        {isFetchingHistory ? (\n          <SpinnerWrapper>\n            <Spinner size={72} />\n          </SpinnerWrapper>\n        ) : (\n          activeTabComponent\n        )}\n      </BetWrapper>\n    </StyledHistory>\n  )\n}\n\nexport default History\n","import React from 'react'\nimport { useTheme } from 'styled-components'\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\n\ninterface MultiplierProps extends SvgProps {\n  isActive: boolean\n}\n\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\n  const theme = useTheme()\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\n\n  return (\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\n      <g filter=\"url(#filter0_i)\">\n        <path\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\n          fill={fill}\n        />\n      </g>\n      <defs>\n        <filter\n          id=\"filter0_i\"\n          x=\"10.0001\"\n          y=\"1.03125\"\n          width=\"224\"\n          height=\"62.9688\"\n          filterUnits=\"userSpaceOnUse\"\n          colorInterpolationFilters=\"sRGB\"\n        >\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\n          <feColorMatrix\n            in=\"SourceAlpha\"\n            type=\"matrix\"\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\n            result=\"hardAlpha\"\n          />\n          <feOffset />\n          <feGaussianBlur stdDeviation=\"1\" />\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\n        </filter>\n      </defs>\n    </Svg>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { CheckmarkCircleIcon, Tag, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb } from '../../helpers'\n\ninterface EnteredTagProps {\n  amount?: number\n}\n\nconst StyledEnteredTag = styled(Tag).attrs({\n  variant: 'secondary',\n  startIcon: <CheckmarkCircleIcon width=\"18px\" />,\n})`\n  font-weight: bold;\n  text-transform: uppercase;\n`\n\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount }) => {\n  const { t } = useTranslation()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(amount)} BNB`}</div>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <span ref={targetRef}>\n        <StyledEnteredTag>{t('Entered')}</StyledEnteredTag>{' '}\n      </span>{' '}\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default EnteredTag\n","import React from 'react'\nimport styled, { CSSProperties } from 'styled-components'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { BetPosition } from 'state/types'\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\nimport EnteredTag from './EnteredTag'\n\ninterface MultiplierArrowProps {\n  betAmount?: number\n  multiplier?: number\n  hasEntered?: boolean\n  betPosition?: BetPosition\n  isDisabled?: boolean\n  isActive?: boolean\n}\n\nconst ArrowWrapper = styled.div`\n  height: 65px;\n  margin: 0 auto;\n  width: 240px;\n`\n\nconst Content = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  height: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: 100%;\n`\n\nconst EnteredTagWrapper = styled.div`\n  position: absolute;\n  z-index: 10;\n`\n\nconst getTextColor =\n  (fallback = 'textSubtle') =>\n  (isActive: boolean, isDisabled: boolean) => {\n    if (isDisabled) {\n      return 'textDisabled'\n    }\n\n    if (isActive) {\n      return 'white'\n    }\n\n    return fallback\n  }\n\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\n  betAmount,\n  multiplier,\n  hasEntered = false,\n  betPosition = BetPosition.BULL,\n  isDisabled = false,\n  isActive = false,\n}) => {\n  const { t } = useTranslation()\n  const upColor = getTextColor('success')(isActive, isDisabled)\n  const downColor = getTextColor('failure')(isActive, isDisabled)\n  const textColor = getTextColor()(isActive, isDisabled)\n  const multiplierText = (\n    <Box>\n      <Flex justifyContent=\"center\" height=\"14px\">\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\n          {multiplier !== undefined ? `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x` : '-'}\n        </Text>\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\n          {t('Payout')}\n        </Text>\n      </Flex>\n    </Box>\n  )\n\n  const getEnteredTag = (position: CSSProperties) => {\n    if (!hasEntered) {\n      return null\n    }\n\n    return (\n      <EnteredTagWrapper style={position}>\n        <EnteredTag amount={betAmount} />\n      </EnteredTagWrapper>\n    )\n  }\n\n  if (betPosition === BetPosition.BEAR) {\n    return (\n      <Box position=\"relative\">\n        <ArrowWrapper>\n          <RoundMultiplierDownArrow isActive={isActive} />\n          {getEnteredTag({ bottom: 0, right: 0 })}\n          <Content>\n            {!isDisabled && multiplierText}\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\n              {t('Down')}\n            </Text>\n          </Content>\n        </ArrowWrapper>\n      </Box>\n    )\n  }\n\n  return (\n    <Box position=\"relative\">\n      <ArrowWrapper>\n        <RoundMultiplierUpArrow isActive={isActive} />\n        {getEnteredTag({ top: 0, left: 0 })}\n        <Content>\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\n            {t('Up')}\n          </Text>\n          {!isDisabled && multiplierText}\n        </Content>\n      </ArrowWrapper>\n    </Box>\n  )\n}\n\nexport default MultiplierArrow\n","import styled from 'styled-components'\nimport { Card as UIKitCard } from '@pancakeswap/uikit'\n\nconst Card = styled(UIKitCard)`\n  border-radius: 16px;\n`\n\nexport default Card\n","import React, { ReactElement } from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport styled, { DefaultTheme } from 'styled-components'\n\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\n\ninterface CardHeaderProps {\n  status: Status\n  title: string\n  epoch: number\n  blockNumber: number\n  icon?: ReactElement\n}\n\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\n  switch (status) {\n    case 'calculating':\n      return theme.colors.gradients.cardHeader\n    case 'live':\n      return 'transparent'\n    case 'canceled':\n      return theme.colors.warning\n    case 'next':\n      return theme.colors.secondary\n    case 'expired':\n    case 'soon':\n    default:\n      return theme.colors.cardBorder\n  }\n}\n\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\ntype FallbackColor = 'text' | 'textSubtle'\n\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\n  switch (status) {\n    case 'expired':\n      return 'textDisabled'\n    case 'next':\n      return 'white'\n    case 'live':\n      return 'secondary'\n    case 'canceled':\n    case 'calculating':\n      return 'text'\n    default:\n      return fallback\n  }\n}\n\nconst StyledCardHeader = styled.div<{ status: Status }>`\n  align-items: center;\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\n  border-radius: 16px 16px 0 0;\n  display: flex;\n  justify-content: space-between;\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\n`\n\nconst Round = styled.div`\n  justify-self: center;\n`\n\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\n  const textColor = getTextColorByStatus(status, 'text')\n  const isLive = status === 'live'\n\n  return (\n    <StyledCardHeader status={status}>\n      <Flex alignItems=\"center\">\n        {icon}\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\n          {title}\n        </Text>\n      </Flex>\n      <Round>\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\n          {`#${epoch}`}\n        </Text>\n      </Round>\n    </StyledCardHeader>\n  )\n}\n\nexport default CardHeader\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\nimport { useBetCanClaim } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport CollectWinningsButton from '../CollectWinningsButton'\n\ninterface CollectWinningsOverlayProps {\n  roundId: string\n  epoch: number\n  payout: number\n  isBottom?: boolean\n}\n\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\n  background-color: ${({ theme }) => theme.colors.secondary};\n  left: 0;\n  position: absolute;\n  width: 100%;\n  z-index: 30;\n\n  ${({ isBottom }) => {\n    return isBottom\n      ? `\n      border-radius: 0 0 16px 16px;\n      bottom: 0;\n    `\n      : `\n      top: 37px; // Card header height\n    `\n  }}\n`\n\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\n  roundId,\n  epoch,\n  payout,\n  isBottom = false,\n  ...props\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const canClaim = useBetCanClaim(account, roundId)\n\n  if (!canClaim) {\n    return null\n  }\n\n  return (\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\n      <CollectWinningsButton payout={payout} roundId={roundId} epoch={epoch} hasClaimed={false} width=\"100%\">\n        {t('Collect Winnings')}\n      </CollectWinningsButton>\n    </Wrapper>\n  )\n}\n\nexport default CollectWinningsOverlay\n","import React from 'react'\nimport { CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport useIsRefundable from '../../hooks/useIsRefundable'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CanceledRoundCardProps {\n  round: Round\n}\n\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\n  const { epoch, startBlock } = round\n  const estimatedEndBlock = startBlock + interval\n\n  const handleSuccess = async () => {\n    setIsRefundable(false)\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"canceled\"\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Canceled')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Flex flexDirection=\"column\" alignItems=\"center\">\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\n              {t('Round Canceled')}\n            </Text>\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\n              {t('Learn More')}\n            </LinkExternal>\n          </Flex>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default CanceledRoundCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetBetByRoundId } from 'state/hooks'\nimport { RoundResult } from '../RoundResult'\nimport { getPayout } from '../../helpers'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\nimport CanceledRoundCard from './CanceledRoundCard'\n\ninterface ExpiredRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst StyledExpiredRoundCard = styled(Card)`\n  opacity: 0.7;\n  transition: opacity 300ms;\n\n  &:hover {\n    opacity: 1;\n  }\n`\n\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { id, epoch, endBlock, lockPrice, closePrice } = round\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\n  const bet = useGetBetByRoundId(account, round.id)\n  const payout = getPayout(bet)\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  return (\n    <Box position=\"relative\">\n      <StyledExpiredRoundCard>\n        <CardHeader\n          status=\"expired\"\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\n          title={t('Expired')}\n          blockNumber={endBlock}\n          epoch={round.epoch}\n        />\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            isActive={betPosition === BetPosition.BULL}\n            hasEntered={hasEnteredUp}\n          />\n          <RoundResult round={round} />\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            isActive={betPosition === BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </StyledExpiredRoundCard>\n      <CollectWinningsOverlay roundId={id} epoch={epoch} payout={payout} isBottom={hasEnteredDown} />\n    </Box>\n  )\n}\n\nexport default ExpiredRoundCard\n","import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\nimport { useBlock } from 'state/hooks'\n\ninterface BlockProgressProps extends ProgressProps {\n  startBlock: number\n  endBlock: number\n}\n\nconst BlockProgress: React.FC<BlockProgressProps> = ({ startBlock, endBlock, ...props }) => {\n  const { currentBlock } = useBlock()\n  const rawProgress = ((currentBlock - startBlock) / (endBlock - startBlock)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default BlockProgress\n","import React from 'react'\nimport { CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetTotalIntervalBlocks } from 'state/hooks'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface CalculatingCardProps {\n  round: Round\n}\n\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const estimatedEndBlock = round.startBlock + interval\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\n    { placement: 'bottom' },\n  )\n\n  return (\n    <>\n      <Card>\n        <CardHeader\n          status=\"calculating\"\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n          title={t('Calculating')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow isDisabled />\n          <RoundResultBox>\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\n              <Spinner size={96} />\n              <Flex mt=\"8px\" ref={targetRef}>\n                <TooltipText>{t('Calculating')}</TooltipText>\n                <InfoIcon ml=\"4px\" />\n              </Flex>\n            </Flex>\n          </RoundResultBox>\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n        </CardBody>\n      </Card>\n      {tooltipVisible && tooltip}\n    </>\n  )\n}\n\nexport default CalculatingCard\n","import React, { useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useCountUp } from 'react-countup'\nimport { CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useBlock, useGetIntervalBlocks, useGetLastOraclePrice } from 'state/hooks'\nimport BlockProgress from 'components/BlockProgress'\nimport { formatUsd, getBubbleGumBackground } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\nconst GradientBorder = styled.div`\n  background: linear-gradient(180deg, #53dee9 0%, #7645d9 100%);\n  border-radius: 16px;\n  padding: 1px;\n`\n\nconst GradientCard = styled(Card)`\n  background: ${({ theme }) => getBubbleGumBackground(theme)};\n`\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, lockBlock, totalAmount } = round\n  const { currentBlock } = useBlock()\n  const totalInterval = useGetIntervalBlocks()\n  const price = useGetLastOraclePrice()\n  const isBull = price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n  const estimatedEndBlock = lockBlock + totalInterval\n  const priceDifference = price.minus(lockPrice).toNumber()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  if (round.failed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (currentBlock > estimatedEndBlock) {\n    return <CalculatingCard round={round} />\n  }\n\n  return (\n    <GradientBorder>\n      <GradientCard>\n        <CardHeader\n          status=\"live\"\n          icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n          title={t('Live')}\n          epoch={round.epoch}\n          blockNumber={estimatedEndBlock}\n        />\n        <BlockProgress variant=\"flat\" scale=\"sm\" startBlock={lockBlock} endBlock={estimatedEndBlock} />\n        <CardBody p=\"16px\">\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bullMultiplier}\n            hasEntered={hasEnteredUp}\n            isActive={isBull}\n          />\n          <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n            <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n              {t('Last Price')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n              <div ref={targetRef}>\n                <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                  {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n                </TooltipText>\n              </div>\n              <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n                {formatUsd(priceDifference)}\n              </PositionTag>\n            </Flex>\n            {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n            <PrizePoolRow totalAmount={totalAmount} />\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n            isActive={!isBull}\n          />\n        </CardBody>\n      </GradientCard>\n      {tooltipVisible && tooltip}\n    </GradientBorder>\n  )\n}\n\nexport default LiveRoundCard\n","import React, { ReactNode } from 'react'\nimport styled from 'styled-components'\n\ninterface CardFlipProps {\n  isFlipped: boolean\n  height: string\n  children: [ReactNode, ReactNode]\n}\n\nconst Front = styled.div`\n  align-items: center;\n  backface-visibility: hidden;\n  display: flex;\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  transition: z-index 600ms;\n  width: 100%;\n\n  & > div {\n    flex: 1;\n  }\n`\n\nconst Back = styled(Front)`\n  transform: rotateY(180deg);\n`\n\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\n  height: 100%;\n  position: relative;\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\n  transform-style: preserve-3d;\n  transition: transform 600ms;\n\n  ${Front} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\n  }\n\n  ${Back} {\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\n  }\n`\n\nconst StyledCardFlip = styled.div`\n  perspective: 1000px;\n  z-index: auto;\n`\n\nconst getComponents = (children: CardFlipProps['children']) => {\n  if (children.length !== 2) {\n    throw new Error('CardFlip: Two children are required')\n  }\n\n  return children\n}\n\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\n  const [front, back] = getComponents(children)\n\n  return (\n    <StyledCardFlip style={{ height }}>\n      <Inner isFlipped={isFlipped}>\n        <Front>{front}</Front>\n        <Back>{back}</Back>\n      </Inner>\n    </StyledCardFlip>\n  )\n}\n\nexport default CardFlip\n","import { useContext } from 'react'\nimport { SwiperContext } from '../context/SwiperProvider'\n\nconst useSwiper = () => {\n  const swiperContext = useContext(SwiperContext)\n\n  if (swiperContext === undefined) {\n    throw new Error('Swiper not found')\n  }\n\n  return swiperContext\n}\n\nexport default useSwiper\n","import styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\n\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\n  flex: 1;\n`\n\nexport default FlexRow\n","import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { BetPosition } from 'state/types'\nimport { getDecimalAmount } from 'utils/formatBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\nimport PositionTag from '../PositionTag'\nimport { getBnbAmount } from '../../helpers'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\nimport Card from './Card'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  onBack: () => void\n  onSuccess: (decimalValue: BigNumber, hash: string) => Promise<void>\n}\n\n// /!\\ TEMPORARY /!\\\n// Set default gasPrice (6 gwei) when calling BetBull/BetBear before new contract is released fixing this 'issue'.\n// TODO: Remove on beta-v2 smart contract release.\nconst gasPrice = new BigNumber(6).times(BIG_TEN.pow(BIG_NINE)).toString()\n\nconst dust = new BigNumber(0.01).times(DEFAULT_TOKEN_DECIMAL)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getButtonProps = (value: BigNumber, bnbBalance: BigNumber, minBetAmountBalance: BigNumber) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(bnbBalance)\n    }\n    return bnbBalance.gt(0)\n  }\n\n  if (!hasSufficientBalance()) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0) || value.isNaN()) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const predictionsContract = usePredictionsContract()\n\n  const balanceDisplay = useMemo(() => {\n    return getBnbAmount(bnbBalance).toString()\n  }, [bnbBalance])\n  const maxBalance = useMemo(() => {\n    return getBnbAmount(bnbBalance.gt(dust) ? bnbBalance.minus(dust) : bnbBalance)\n  }, [bnbBalance])\n  const minBetAmountBalance = useMemo(() => {\n    return getBnbAmount(minBetAmount)\n  }, [minBetAmount])\n\n  const valueAsBn = new BigNumber(value)\n\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n\n  const [percent, setPercent] = useState(0)\n\n  const handleInputChange = (input: string) => {\n    if (input) {\n      const percentage = Math.floor(new BigNumber(input).dividedBy(maxBalance).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setValue(input)\n  }\n\n  const handlePercentChange = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = maxBalance.dividedBy(100).multipliedBy(sliderPercent)\n      setValue(percentageOfStakingMax.toFormat(18))\n    } else {\n      setValue('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    setPercent(0)\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmountBalance)\n\n  const handleEnterPosition = () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n    const decimalValue = getDecimalAmount(valueAsBn)\n\n    predictionsContract.methods[betMethod]()\n      .send({ from: account, value: decimalValue, gasPrice })\n      .once('sending', () => {\n        setIsTxPending(true)\n      })\n      .once('receipt', async (result) => {\n        setIsTxPending(false)\n        onSuccess(decimalValue, result.transactionHash as string)\n      })\n      .once('error', (error) => {\n        const errorMsg = t('An error occurred, unable to enter your position')\n\n        toastError(t('Error'), error?.message)\n        setIsTxPending(false)\n        console.error(errorMsg, error)\n      })\n  }\n\n  // Warnings\n  useEffect(() => {\n    const bnValue = new BigNumber(value)\n    const hasSufficientBalance = bnValue.gt(0) && bnValue.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (bnValue.gt(0) && bnValue.lt(minBetAmountBalance)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: minBetAmountBalance, token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmountBalance, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleInputChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handlePercentChange}\n          valueLabel={account ? `${percent}%` : ''}\n          step={0.1}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percentShortcut) => {\n            const handleClick = () => {\n              handlePercentChange(percentShortcut)\n            }\n\n            return (\n              <Button\n                key={percentShortcut}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percentShortcut}%`}\n              </Button>\n            )\n          })}\n          <Button\n            scale=\"xs\"\n            variant=\"tertiary\"\n            onClick={() => handlePercentChange(100)}\n            disabled={!account || isTxPending}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, Round } from 'state/types'\nimport { useBlock, useGetIntervalBlocks } from 'state/hooks'\nimport { markPositionAsEntered } from 'state/predictions'\nimport useToast from 'hooks/useToast'\nimport CardFlip from '../CardFlip'\nimport { formatBnb, getBnbAmount } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: Round\n  betAmount?: number\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: number\n  bearMultiplier: number\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const interval = useGetIntervalBlocks()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { currentBlock } = useBlock()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = currentBlock >= round.startBlock + interval\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnb(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  // Bettable rounds do not have an lockBlock set so we approximate it by adding the block interval\n  // to the start block\n  const estimatedLockBlock = round.startBlock + interval\n\n  const getCanEnterPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getCanEnterPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (decimalValue: BigNumber, hash: string) => {\n    // Optimistically set the user bet so we see the entered position immediately.\n    dispatch(\n      markPositionAsEntered({\n        account,\n        roundId: round.id,\n        bet: {\n          hash,\n          round,\n          position,\n          amount: getBnbAmount(decimalValue).toNumber(),\n          claimed: false,\n          claimedHash: null,\n        },\n      }),\n    )\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      t('%position% position entered', {\n        position: positionDisplay,\n      }),\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          blockNumber={estimatedLockBlock}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n","import { useEffect, useRef, useState } from 'react'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { getWeb3NoAccount } from 'utils/web3'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useBlockCountdown = (blockNumber: number) => {\n  const timer = useRef<ReturnType<typeof setTimeout>>(null)\n  const [secondsRemaining, setSecondsRemaining] = useState(0)\n\n  useEffect(() => {\n    const startCountdown = async () => {\n      const web3 = getWeb3NoAccount()\n      const currentBlock = await web3.eth.getBlockNumber()\n\n      if (blockNumber > currentBlock) {\n        setSecondsRemaining((blockNumber - currentBlock) * BSC_BLOCK_TIME)\n\n        // Clear previous interval\n        if (timer.current) {\n          clearInterval(timer.current)\n        }\n\n        timer.current = setInterval(() => {\n          setSecondsRemaining((prevSecondsRemaining) => {\n            if (prevSecondsRemaining === 1) {\n              clearInterval(timer.current)\n            }\n\n            return prevSecondsRemaining - 1\n          })\n        }, 1000)\n      }\n    }\n\n    startCountdown()\n\n    return () => {\n      clearInterval(timer.current)\n    }\n  }, [setSecondsRemaining, blockNumber, timer])\n\n  return secondsRemaining\n}\n\nexport default useBlockCountdown\n","import { useGetCurrentRoundBlockNumber, useGetIntervalBlocks } from 'state/hooks'\nimport useBlockCountdown from 'hooks/useGetBlockCountdown'\n\n/**\n * Returns a countdown in seconds of a given block\n */\nconst useRoundCountdown = (intervalsToAdd = 1) => {\n  const interval = useGetIntervalBlocks()\n  const currentRoundBlockNum = useGetCurrentRoundBlockNumber()\n  const blocksToAdd = intervalsToAdd * interval\n  const seconds = useBlockCountdown(currentRoundBlockNum + blocksToAdd)\n\n  return seconds\n}\n\nexport default useRoundCountdown\n","import React from 'react'\nimport { CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { Round, BetPosition } from 'state/types'\nimport { useGetCurrentEpoch, useGetTotalIntervalBlocks } from 'state/hooks'\nimport { formatRoundTime } from '../../helpers'\nimport useRoundCountdown from '../../hooks/useRoundCountdown'\nimport { RoundResultBox } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport Card from './Card'\nimport CardHeader from './CardHeader'\n\ninterface SoonRoundCardProps {\n  round: Round\n}\n\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\n  const { t } = useTranslation()\n  const interval = useGetTotalIntervalBlocks()\n  const currentEpoch = useGetCurrentEpoch()\n  const estimatedEndBlock = round.startBlock + interval\n  const seconds = useRoundCountdown(round.epoch - currentEpoch + 1)\n  const countdown = formatRoundTime(seconds)\n\n  return (\n    <Card>\n      <CardHeader\n        status=\"soon\"\n        icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\n        title={t('Later')}\n        epoch={round.epoch}\n        blockNumber={estimatedEndBlock}\n      />\n      <CardBody p=\"16px\">\n        <MultiplierArrow isDisabled />\n        <RoundResultBox>\n          <Text textAlign=\"center\">\n            <Text bold>{t('Entry starts')}</Text>\n            <Text fontSize=\"24px\" bold>\n              {`~${countdown}`}\n            </Text>\n          </Text>\n        </RoundResultBox>\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SoonRoundCard\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetBetByRoundId, useGetCurrentEpoch } from 'state/hooks'\nimport { BetPosition, Round } from 'state/types'\nimport { getMultiplier } from '../../helpers'\nimport ExpiredRoundCard from './ExpiredRoundCard'\nimport LiveRoundCard from './LiveRoundCard'\nimport OpenRoundCard from './OpenRoundCard'\nimport SoonRoundCard from './SoonRoundCard'\n\ninterface RoundCardProps {\n  round: Round\n}\n\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\n  const { id, epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\n  const currentEpoch = useGetCurrentEpoch()\n  const { account } = useWeb3React()\n  const bet = useGetBetByRoundId(account, id)\n  const hasEntered = bet !== null\n  const hasEnteredUp = hasEntered && bet.position === BetPosition.BULL\n  const hasEnteredDown = hasEntered && bet.position === BetPosition.BEAR\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\n\n  // Next (open) round\n  if (epoch === currentEpoch && lockPrice === null) {\n    return (\n      <OpenRoundCard\n        round={round}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        betAmount={bet?.amount}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Live round\n  if (closePrice === null && epoch === currentEpoch - 1) {\n    return (\n      <LiveRoundCard\n        betAmount={bet?.amount}\n        hasEnteredDown={hasEnteredDown}\n        hasEnteredUp={hasEnteredUp}\n        round={round}\n        bullMultiplier={bullMultiplier}\n        bearMultiplier={bearMultiplier}\n      />\n    )\n  }\n\n  // Fake future rounds\n  if (epoch > currentEpoch) {\n    return <SoonRoundCard round={round} />\n  }\n\n  // Past rounds\n  return (\n    <ExpiredRoundCard\n      round={round}\n      hasEnteredDown={hasEnteredDown}\n      hasEnteredUp={hasEnteredUp}\n      betAmount={bet?.amount}\n      bullMultiplier={bullMultiplier}\n      bearMultiplier={bearMultiplier}\n    />\n  )\n}\n\nexport default RoundCard\n","import React, { useEffect } from 'react'\nimport { useCountUp } from 'react-countup'\nimport styled from 'styled-components'\nimport { BnbUsdtPairTokenIcon, Box, Card, PocketWatchIcon, Text } from '@pancakeswap/uikit'\nimport { useGetLastOraclePrice } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatRoundTime } from '../helpers'\nimport useRoundCountdown from '../hooks/useRoundCountdown'\n\nconst Token = styled(Box)`\n  margin-top: -24px;\n  position: absolute;\n  top: 50%;\n  z-index: 30;\n\n  & > svg {\n    height: 48px;\n    width: 48px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: -32px;\n\n    & > svg {\n      height: 64px;\n      width: 64px;\n    }\n  }\n`\n\nconst Title = styled(Text)`\n  font-size: 16px;\n  line-height: 21px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    font-size: 20px;\n    line-height: 22px;\n  }\n`\n\nconst Price = styled(Text)`\n  height: 18px;\n  justify-self: start;\n  width: 60px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n  }\n`\n\nconst Interval = styled(Text)`\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: center;\n    width: 32px;\n  }\n`\n\nconst Label = styled(Card)<{ dir: 'left' | 'right' }>`\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\n  display: flex;\n  flex-direction: column;\n  overflow: initial;\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    align-items: center;\n    border-radius: 16px;\n    flex-direction: row;\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\n  }\n`\n\nexport const PricePairLabel: React.FC = () => {\n  const price = useGetLastOraclePrice()\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: price.toNumber(),\n    duration: 1,\n    decimals: 3,\n  })\n\n  useEffect(() => {\n    update(price.toNumber())\n  }, [price, update])\n\n  return (\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\n      <Token left={0}>\n        <BnbUsdtPairTokenIcon />\n      </Token>\n      <Label dir=\"left\">\n        <Title bold textTransform=\"uppercase\">\n          BNBUSDT\n        </Title>\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\n      </Label>\n    </Box>\n  )\n}\n\ninterface TimerLabelProps {\n  interval: string\n  unit: 'm' | 'h' | 'd'\n}\n\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\n  const seconds = useRoundCountdown()\n  const countdown = formatRoundTime(seconds)\n  const { t } = useTranslation()\n\n  return (\n    <Box pr=\"24px\" position=\"relative\">\n      <Label dir=\"right\">\n        <Title bold color=\"secondary\">\n          {seconds === 0 ? t('Closing') : countdown}\n        </Title>\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\n      </Label>\n      <Token right={0}>\n        <PocketWatchIcon />\n      </Token>\n    </Box>\n  )\n}\n","import React from 'react'\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Card, IconButton } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport useSwiper from '../hooks/useSwiper'\n\nconst StyledPrevNextNav = styled(Card)`\n  align-items: center;\n  display: none;\n  justify-content: space-between;\n  overflow: initial;\n  position: relative;\n  width: 128px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n  }\n`\n\nconst Icon = styled.div`\n  cursor: pointer;\n  left: 50%;\n  margin-left: -32px;\n  position: absolute;\n`\n\nconst PrevNextNav = () => {\n  const { swiper } = useSwiper()\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n\n  const handlePrevSlide = () => {\n    swiper.slidePrev()\n  }\n\n  const handleNextSlide = () => {\n    swiper.slideNext()\n  }\n\n  const handleSlideToLive = () => {\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n    swiper.slideTo(currentEpochIndex - 1)\n    swiper.update()\n  }\n\n  return (\n    <StyledPrevNextNav>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n      <Icon onClick={handleSlideToLive}>\n        <BunnyCardsIcon width=\"64px\" />\n      </Icon>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\n      </IconButton>\n    </StyledPrevNextNav>\n  )\n}\n\nexport default PrevNextNav\n","import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { setHistoryPaneState } from 'state/predictions'\nimport { useGetIsFetchingHistory } from 'state/hooks'\n\nconst HistoryButton = () => {\n  const isFetchingHistory = useGetIsFetchingHistory()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleClick = () => {\n    dispatch(setHistoryPaneState(true))\n  }\n\n  return (\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\n    </IconButton>\n  )\n}\n\nexport default HistoryButton\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\nimport FlexRow from './FlexRow'\nimport { PricePairLabel, TimerLabel } from './Label'\nimport PrevNextNav from './PrevNextNav'\nimport HistoryButton from './HistoryButton'\n\nconst SetCol = styled.div`\n  flex: none;\n  width: auto;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    width: 270px;\n  }\n`\n\nconst HelpButtonWrapper = styled.div`\n  order: 1;\n  margin: 0 8px 0 0;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 2;\n    margin: 0 0 0 8px;\n  }\n`\n\nconst TimerLabelWrapper = styled.div`\n  order: 2;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    order: 1;\n  }\n`\n\nconst HistoryButtonWrapper = styled.div`\n  display: none;\n  order: 3;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: initial;\n  }\n`\n\nconst Menu = () => {\n  return (\n    <FlexRow alignItems=\"center\" p=\"16px\">\n      <SetCol>\n        <PricePairLabel />\n      </SetCol>\n      <FlexRow justifyContent=\"center\">\n        <PrevNextNav />\n      </FlexRow>\n      <SetCol>\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n          <TimerLabelWrapper>\n            <TimerLabel interval=\"5\" unit=\"m\" />\n          </TimerLabelWrapper>\n          <HelpButtonWrapper>\n            <IconButton\n              variant=\"subtle\"\n              as=\"a\"\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n            >\n              <HelpIcon width=\"24px\" color=\"white\" />\n            </IconButton>\n          </HelpButtonWrapper>\n          <HistoryButtonWrapper>\n            <HistoryButton />\n          </HistoryButtonWrapper>\n        </Flex>\n      </SetCol>\n    </FlexRow>\n  )\n}\n\nexport default Menu\n","import { useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/hooks'\nimport { fetchCurrentBets } from 'state/predictions'\nimport useSwiper from './useSwiper'\n\n/**\n * Hooks for actions to be performed when the round changes\n */\nconst useOnNextRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  const { account } = useWeb3React()\n  const previousEpoch = usePreviousValue(currentEpoch)\n  const { swiper } = useSwiper()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: rounds.map((round) => round.id) }))\n\n      // Slide to the current LIVE round which is always the one before the current round\n      swiper.slideTo(currentEpochIndex - 1)\n      swiper.update()\n    }\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\n}\n\nexport default useOnNextRound\n","import React from 'react'\nimport styled from 'styled-components'\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport { Box } from '@pancakeswap/uikit'\nimport { useGetSortedRounds } from 'state/hooks'\nimport 'swiper/swiper.min.css'\nimport RoundCard from './components/RoundCard'\nimport Menu from './components/Menu'\nimport useSwiper from './hooks/useSwiper'\nimport useOnNextRound from './hooks/useOnNextRound'\n\nSwiperCore.use([Keyboard, Mousewheel])\n\nconst StyledSwiper = styled.div`\n  .swiper-wrapper {\n    align-items: center;\n    display: flex;\n  }\n\n  .swiper-slide {\n    width: 320px;\n  }\n`\nconst Positions: React.FC = () => {\n  const { setSwiper } = useSwiper()\n  const rounds = useGetSortedRounds()\n  const initialIndex = Math.floor(rounds.length / 2)\n\n  useOnNextRound()\n\n  return (\n    <Box overflow=\"hidden\">\n      <Menu />\n      <StyledSwiper>\n        <Swiper\n          initialSlide={initialIndex}\n          onSwiper={setSwiper}\n          spaceBetween={16}\n          slidesPerView=\"auto\"\n          freeMode\n          freeModeSticky\n          centeredSlides\n          freeModeMomentumRatio={0.25}\n          freeModeMomentumVelocityRatio={0.5}\n          mousewheel\n          keyboard\n          resizeObserver\n        >\n          {rounds.map((round) => (\n            <SwiperSlide key={round.id}>\n              <RoundCard round={round} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n      </StyledSwiper>\n    </Box>\n  )\n}\n\nexport default Positions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex } from '@pancakeswap/uikit'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { PredictionStatus } from 'state/types'\nimport MobileMenu from './components/MobileMenu'\nimport History from './History'\nimport Positions from './Positions'\nimport Chart from './Chart'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\n\nenum PageView {\n  POSITIONS = 'positions',\n  HISTORY = 'history',\n  CHART = 'chart',\n}\n\nconst StyledMobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  max-height: 100%;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    display: none;\n  }\n`\n\nconst View = styled.div<{ isVisible: boolean }>`\n  height: 100%;\n  left: 0;\n  position: absolute;\n  top: 0;\n  width: 100%;\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n`\n\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\n  if (isHistoryPaneOpen) {\n    return PageView.HISTORY\n  }\n\n  if (isChartPaneOpen) {\n    return PageView.CHART\n  }\n\n  return PageView.POSITIONS\n}\n\nconst Mobile: React.FC = () => {\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\n  const status = useGetPredictionsStatus()\n\n  return (\n    <StyledMobile>\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\n        <View isVisible={view === PageView.POSITIONS}>\n          <Flex alignItems=\"center\" height=\"100%\">\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </Flex>\n        </View>\n        <View isVisible={view === PageView.CHART}>\n          <Chart />\n        </View>\n        <View isVisible={view === PageView.HISTORY}>\n          <History />\n        </View>\n      </Box>\n      <MobileMenu />\n    </StyledMobile>\n  )\n}\n\nexport default Mobile\n","import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && (\n              <div>\n                <Positions />\n              </div>\n            )}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ButtonMenu,\n  ButtonMenuItem,\n  Cards,\n  ChartIcon,\n  HistoryIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { PredictionStatus } from 'state/types'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/hooks'\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\nimport useSwiper from '../hooks/useSwiper'\n\nconst ButtonNav = styled.div`\n  flex: none;\n`\n\nconst TabNav = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nconst StyledMobileMenu = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  display: flex;\n  flex: none;\n  height: 64px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\n  if (isHistoryOpen) {\n    return 2\n  }\n\n  if (isChartOpen) {\n    return 1\n  }\n\n  return 0\n}\n\nconst MobileMenu = () => {\n  const { swiper } = useSwiper()\n  const isHistoryOpen = useIsHistoryPaneOpen()\n  const isChartOpen = useIsChartPaneOpen()\n  const status = useGetPredictionsStatus()\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleItemClick = (index: number) => {\n    switch (index) {\n      case 2:\n        dispatch(setHistoryPaneState(true))\n        break\n      case 1:\n        dispatch(setChartPaneState(true))\n        dispatch(setHistoryPaneState(false))\n        break\n      case 0:\n      default:\n        dispatch(setHistoryPaneState(false))\n        dispatch(setChartPaneState(false))\n    }\n  }\n\n  return (\n    <StyledMobileMenu>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n      <TabNav>\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\n          <ButtonMenuItem>\n            <Cards color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem>\n            <ChartIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n          <ButtonMenuItem disabled={!account}>\n            <HistoryIcon color=\"currentColor\" />\n          </ButtonMenuItem>\n        </ButtonMenu>\n      </TabNav>\n      <ButtonNav>\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\n        </IconButton>\n      </ButtonNav>\n    </StyledMobileMenu>\n  )\n}\n\nexport default MobileMenu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex } from '@pancakeswap/uikit'\nimport Menu from './components/Menu'\nimport TradingView from './components/TradingView'\n\nconst MenuWrapper = styled.div`\n  flex: none;\n`\n\nconst ChartWrapper = styled.div`\n  flex: 1;\n  height: 100%;\n`\n\nconst Chart = () => {\n  return (\n    <Flex flexDirection=\"column\" height=\"100%\">\n      <MenuWrapper>\n        <Menu />\n      </MenuWrapper>\n      <ChartWrapper>\n        <TradingView />\n      </ChartWrapper>\n    </Flex>\n  )\n}\n\nexport default Chart\n","import React, { useState } from 'react'\nimport {\n  ModalContainer,\n  ModalBody,\n  Text,\n  Button,\n  Flex,\n  InjectedModalProps,\n  Checkbox,\n  ModalHeader,\n  ModalTitle,\n  Heading,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\n\ninterface RiskDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst GradientModalHeader = styled(ModalHeader)`\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n  padding-bottom: 24px;\n  padding-top: 24px;\n`\n\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\n  const { t } = useTranslation()\n\n  const handleSetAcknowledgeRisk = () => {\n    setAcknowledgeRisk(!acknowledgeRisk)\n  }\n\n  const handleSetAcknowledgeBeta = () => {\n    setAcknowledgeBeta(!acknowledgeBeta)\n  }\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <GradientModalHeader>\n        <ModalTitle>\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\n        </ModalTitle>\n      </GradientModalHeader>\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\n          <Heading as=\"h3\" mb=\"24px\">\n            {t('This Product is in beta.')}\n          </Heading>\n\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\n          </Text>\n\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\n              </div>\n              <Text ml=\"8px\">\n                {t(\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\n                )}\n              </Text>\n            </Flex>\n          </label>\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\n            <Flex alignItems=\"center\">\n              <div style={{ flex: 'none' }}>\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\n              </div>\n              <Text ml=\"8px\">\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\n              </Text>\n            </Flex>\n          </label>\n        </Box>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\n          {t('Continue')}\n        </Button>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default RiskDisclaimer\n","import React from 'react'\nimport { ModalContainer, ModalBody, Text, Button, InjectedModalProps, LinkExternal, Flex } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ChartDisclaimerProps extends InjectedModalProps {\n  onSuccess: () => void\n}\n\nconst ChartDisclaimer: React.FC<ChartDisclaimerProps> = ({ onSuccess, onDismiss }) => {\n  const { t } = useTranslation()\n\n  const handleConfirm = () => {\n    onSuccess()\n    onDismiss()\n  }\n\n  return (\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\n        <Text as=\"p\" mb=\"16px\">\n          {t('Charts are provided for reference only and do not reflect rounds’ final outcome.')}\n        </Text>\n        <Text as=\"p\" mb=\"16px\">\n          {t('Please refer to the prices shown on the cards for the final outcome.')}\n        </Text>\n        <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\n          {t('I understand')}\n        </Button>\n        <Flex justifyContent=\"center\" alignItems=\"center\">\n          <LinkExternal\n            href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\n            external\n          >\n            {t('Learn More')}\n          </LinkExternal>\n        </Flex>\n      </ModalBody>\n    </ModalContainer>\n  )\n}\n\nexport default ChartDisclaimer\n","import React, { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Helmet } from 'react-helmet-async'\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useInitialBlock, useIsChartPaneOpen } from 'state/hooks'\nimport {\n  getMarketData,\n  getStaticPredictionsData,\n  makeFutureRoundResponse,\n  makeRoundData,\n  transformRoundResponse,\n} from 'state/predictions/helpers'\nimport { fetchCurrentBets, initialize, setPredictionStatus } from 'state/predictions'\nimport { HistoryFilter, PredictionsState, PredictionStatus } from 'state/types'\nimport usePersistState from 'hooks/usePersistState'\nimport PageLoader from 'components/PageLoader'\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\nimport usePollRoundData from './hooks/usePollRoundData'\nimport Container from './components/Container'\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\nimport SwiperProvider from './context/SwiperProvider'\nimport Desktop from './Desktop'\nimport Mobile from './Mobile'\nimport RiskDisclaimer from './components/RiskDisclaimer'\nimport ChartDisclaimer from './components/ChartDisclaimer'\n\nconst FUTURE_ROUND_COUNT = 2 // the number of rounds in the future to show\n\nconst Predictions = () => {\n  const { isXl } = useMatchBreakpoints()\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_accepted_risk',\n  })\n  const [hasAcceptedChart, setHasAcceptedChart] = usePersistState(false, {\n    localStorageKey: 'pancake_predictions_chart',\n  })\n  const { account } = useWeb3React()\n  const status = useGetPredictionsStatus()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const initialBlock = useInitialBlock()\n  const isDesktop = isXl\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\n  const handleAcceptChart = () => setHasAcceptedChart(true)\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer onSuccess={handleAcceptChart} />, false)\n\n  // TODO: memoize modal's handlers\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\n\n  // Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedRisk) {\n      onPresentRiskDisclaimerRef.current()\n    }\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\n\n  // Chart Disclaimer\n  useEffect(() => {\n    if (!hasAcceptedChart && isChartPaneOpen) {\n      onPresentChartDisclaimerRef.current()\n    }\n  }, [onPresentChartDisclaimerRef, hasAcceptedChart, isChartPaneOpen])\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      const [staticPredictionsData, marketData] = await Promise.all([getStaticPredictionsData(), getMarketData()])\n      const { currentEpoch, intervalBlocks, bufferBlocks } = staticPredictionsData\n      const latestRound = marketData.rounds.find((round) => round.epoch === currentEpoch)\n\n      // Fetch data on current unclaimed bets\n      dispatch(fetchCurrentBets({ account, roundIds: marketData.rounds.map((round) => round.id) }))\n\n      if (marketData.market.paused) {\n        dispatch(setPredictionStatus(PredictionStatus.PAUSED))\n      } else if (latestRound && latestRound.epoch === currentEpoch) {\n        const currentRoundStartBlock = Number(latestRound.startBlock)\n        const futureRounds = []\n        const halfInterval = (intervalBlocks + bufferBlocks) / 2\n\n        for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n          futureRounds.push(makeFutureRoundResponse(currentEpoch + i, (currentRoundStartBlock + halfInterval) * i))\n        }\n\n        const roundData = makeRoundData([...marketData.rounds, ...futureRounds.map(transformRoundResponse)])\n\n        dispatch(\n          initialize({\n            ...(staticPredictionsData as Omit<PredictionsState, 'rounds'>),\n            historyFilter: HistoryFilter.ALL,\n            currentRoundStartBlockNumber: currentRoundStartBlock,\n            rounds: roundData,\n            history: {},\n            bets: {},\n          }),\n        )\n      } else {\n        // If the latest epoch from the API does not match the latest epoch from the contract we have an unrecoverable error\n        dispatch(setPredictionStatus(PredictionStatus.ERROR))\n      }\n    }\n\n    // Do not start initialization until the first block has been retrieved\n    if (initialBlock > 0) {\n      fetchInitialData()\n    }\n  }, [initialBlock, dispatch, account])\n\n  usePollRoundData()\n  usePollOraclePrice()\n\n  if (status === PredictionStatus.INITIAL) {\n    return <PageLoader />\n  }\n\n  return (\n    <>\n      <Helmet>\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\n      </Helmet>\n      <SwiperProvider>\n        <Container>\n          {isDesktop ? <Desktop /> : <Mobile />}\n          <CollectWinningsPopup />\n        </Container>\n      </SwiperProvider>\n    </>\n  )\n}\n\nexport default Predictions\n"],"sourceRoot":""}